*
*	Amiga-specific portions of Track'N'Field
*
* (c) JOTD 2025
*

	* first instruction (includes contain code)
	jra		start

	.include "../src/track_and_field.inc"

	.include "hardware/custom.i"
	.include "exec/types2.i"
	.include "lvo/exec_lvos.i"
	.include "lvo/dos_lvos.i"
	.include "lvo/graphics_lvos.i"

	.global	m6809_direct_page_pointer
	
AttnFlags = 0x128
AFB_68010 = 0
AFB_68020 = 1
AFB_68030 = 2

NO68020 = 1

NB_POSSIBLE_SPRITES = 256
NB_POSSIBLE_TILES = 768

NB_SCROLL_ROWS = 28

* 3 & 3: most performant
BITPLANE_FMODE = 3			| works with 1, albeit slower
SPRITE_FMODE = 3			| required!!

BORDERBLANK = 1

BASE_BPLCON3_VALUE = (1<<12)+(BORDERBLANK<<5)  | dpf second playfield palette starts at color 16!
BASE_BPLCON2_VALUE = 0x0024		| sprites above all playfields

SPRITE_X_CORRECTION = 0
SPRITE_Y_CORRECTION = 0
SPRITE_HEIGHT = 16

Y_MAX = 256

_custom = 0xDFF000


RAM_START = 0x1800
ROM_START = 0x6000




	.ifdef	RELEASE
OPT_ENABLE_PROFILING = 0         | DO NOT CHANGE THIS
OPT_ENABLE_LOGGING = 0           | DO NOT CHANGE THIS

	.else
OPT_ENABLE_LOGGING = 1
OPT_ENABLE_PROFILING = 0
* set to higher values than 1 to speed game up


	.endif

* to save bandwidth, do not clear cookie cut blit
* if no bitplane data: there will be some color artefacts
* but not noticeable unless 2 very different not very small
* ships cross each other paths, which doesn't happen very often
OPT_IGNORE_ZERO_BITPLANE = 1

	
OPT_ENABLE_DOUBLE_BUFFERING = 1


OPT_ENABLE_MULTIPLEXED_SPRITES = 0

NB_TILE_PLANES = 4
NB_BOB_PLANES = 4
TOTAL_NB_COLORS = 1<<NB_TILE_PLANES
FG_NB_BYTES_PER_ROW = 40
BG_NB_BYTES_PER_ROW = 80

* add 16 so sprites can be drawn at the bottom
* without corrupting the screen
NB_LINES = Y_MAX+16
NB_PLAYFIELD_LINES = NB_LINES


BG_SCREEN_PLANE_SIZE = BG_NB_BYTES_PER_ROW*NB_PLAYFIELD_LINES
FG_SCREEN_PLANE_SIZE = FG_NB_BYTES_PER_ROW*NB_PLAYFIELD_LINES
BG_SCREEN_SIZE = BG_SCREEN_PLANE_SIZE*NB_TILE_PLANES
FG_SCREEN_SIZE = FG_SCREEN_PLANE_SIZE*NB_BOB_PLANES

NB_HOST_SPRITES = 8

NB_TARGET_SPRITES = 0x40  
	
TARGET_SPRITE_X = 0x400
TARGET_SPRITE_Y = 1 
TARGET_SPRITE_CODE = 0x401 
TARGET_SPRITE_ATTR = 0
TARGET_SPRITE_SIZEOF = 4

	STRUCTURE	PREVIOUS_SPRITE,0
	UWORD	PREV_X
	UWORD	PREV_Y
	UWORD	PREV_HEIGHT			
	UWORD	PREV_WIDTH			
	UBYTE	PREV_STAR			
	UBYTE	PREV_ACTIVE_PLANES	
	LABEL		PREVIOUS_SPRITE_SIZEOF

* hardware sprite (not used)
	STRUCTURE	SPRITE,0
	UBYTE	SPRITE_X
	UBYTE	SPRITE_Y
	UBYTE	SPRITE_CODE
	UBYTE	SPRITE_CLUT
	LABEL	SPRITE_SIZEOF




BIT_INSERT_COIN_1 = 0
BIT_INSERT_COIN_2 = 1
BIT_START_1P = 3
BIT_START_2P = 4

BIT_RIGHT = 0
BIT_FIRE = 1
BIT_LEFT = 2
* not used?
BIT_DOWN = 3
BIT_UP = 4

.macro	GET_MEMORY_START_AND_DP
	move.l	m6809_direct_page_pointer,a4
	.ifdef	RELEASE
	lea		ram_buffer-0x1800,a6
	.else
	move.l		ram_start_1800,a6
	
	* adjust offset to avoid subbing at run-time
	sub.w	#0x1800,a6
	.endif
	.endm
	
.macro	WAIT_BLIT
	move.w	#0x8400,(dmacon,a5)		| blitter high priority
wait\@:
	BTST	#6,(dmaconr,a5)
	BNE.S	wait\@
	move.w	#0x0400,(dmacon,a5)		| blitter normal priority
.endm

.macro MUL_TABLE value,len
mul\value\()_table:
	.set    mulv,0
	.rept	\len
	dc.w	mulv
	.set	mulv,mulv+\value
	.endr
.endm


* debug macro that colors the screen until LMB pressed
.macro 	blitz_bypass
	move.w	d0,-(a7)
	clr.w	d0
loop\@:
	move.w	d0,_custom+color
	btst	#6,0xbfe001
	beq.b	out\@
	addq.w	#1,d0
	bra.b	loop\@
out\@:
	move.w	(a7)+,d0
	nop
.endm

* same thing but if LMB is pressed when entering, macro waits for release)
.macro blitz
w\@:
	btst	#6,0xbfe001
	beq.b	w\@
	blitz_bypass
.endm

start:
	move.l	a7,old_stack
	jra	_user
    
	
* exports

	.global		_user
	.global		_player_start
	.global		_demo_end
	.global		_resload
	.global		_dosbase
	.global		cheat_used
* osd layer		
		.global osd_enable_interrupts
		.global osd_disable_interrupts
		.global osd_break		| for debug	
		.global osd_blitz		| for debug
		.global osd_video_byte_dirty
		.global osd_video_word_dirty
		.global osd_read_dsw_1
		.global osd_read_dsw_2
		.global osd_read_dsw_3
		.global osd_read_inputs_1
		.global osd_read_inputs_2
		.global osd_read_system_inputs
		
		* read/write on memory
		.ifndef	RELEASE
		.global	osd_log_cpu
		.global osd_get_last_known_pc
		.global	osd_read_file
		.global	osd_write_file
		.global	osd_dump_logs
		.global	osd_cpu_logging_control
		.endif


		.global	is_game_playing
		
	.include	"ReadJoypad.i"
	.include	"whdload_funcs.i"
		.text


	.ifne	OPT_ENABLE_PROFILING
	* init profiling if enabled
	.include	"profiler.68k"
	.endif

	    
_user:
    * if D0 contains "WHDL"
    * A0 contains resload
        
    cmp.l   #0x05748444c,D0	| WHDL
    bne.b   .standard
	move.b	d1,_keyexit
    move.l a0,_resload

	move.l	a0,a2
	lea	(_tag,pc),a0
	jsr	(resload_Control,a2)
	
    bra		.no_forbid
.standard:
	
    * open dos library, graphics library
    move.l  0x4.W,a6
    lea dosname,a1
    moveq.l #0,d0
    jsr _LVOOpenLibrary(a6)
    move.l  d0,_dosbase

	lea	read_args_string(pc),a0
	lea	program_args(pc),a1
	move.l	#program_args_end-program_args,d0
	lsr.l	#2,d0		| number of longs
	

	bsr	get_args_BCPL

0:	
	lea		program_args,a0

	move.l	(A0)+,D0	| INVINCIBLE/S
	beq.b	1f
	or.l	#1,cheat_flags
	st.b	cheat_used
1:
	move.l	(A0)+,D0	| INFLIVES/S
	beq.b	2f
	or.l	#2,cheat_flags
	st.b	cheat_used
2:

	move.l	(A0)+,D0	| CHEATKEYS/S
	beq.b	2f
	* cheat isn't used as long as no cheat key is used
	or.l	#0x10,cheat_flags
2:

	move.l	(A0)+,D0	| STARTLIVES/K/N
	beq.b	2f
	bsr		bcpl_string_to_int
	subq	#3,d0
	jmi		2f
	move.l	d0,start_lives
2:
	move.l	(A0)+,D0	| SKILL/K/N
	beq.b	2f
	bsr		bcpl_string_to_int
	move.l	d0,difficulty_level
2:
	move.l	(A0)+,D0	| STARTLEVEL/K/N
	beq.b	2f
	bsr		bcpl_string_to_int
	move.l	d0,start_level_option
2:


	lea		_custom,a5
	lea		debug_copperlist,a0
	move.l	a0,cop1lc(a5)

* no multitask
	
	move.l	4.W,A6
	* system-friendly PAL/NTSC detect
	cmp.b #50,0x212(a6)		| vblankfrequency
	jeq	0f
	* set NTSC
	move.l	#NTSC_MONITOR_ID,monitor
0:
	lea graphicsname,a1
    moveq.l #0,d0
    jsr _LVOOpenLibrary(a6)
    move.l  d0,_gfxbase
    move.l	d0,a6
	move.l	38(a6),old_syscoplist
	move.l	34(A6),old_actiview		| gb_ActiView

	sub.l	a1,a1
	jsr	_LVOLoadView(a6)
	jsr	_LVOWaitTOF(a6)
	jsr	_LVOWaitTOF(a6)
	
	jbsr		load_highscores
    * check if "floppy" file is here
    move.l  _dosbase(pc),a6
    move.l   #floppy_file,d1
    move.l  #1005,d2   | MODE_OLDFILE
    jsr     _LVOOpen(a6)
    move.l  d0,d1
    beq.b   .no_floppy
    * "floppy" file found
    jsr     _LVOClose(a6)
    * wait 2 seconds for floppy drive to switch off
    move.l  #100,d1
    jsr     _LVODelay(a6)
.no_floppy:

* no multitask
	
    move.l  4,a6
    jsr _LVOForbid(a6)

    
	sub.l	A1,A1
	jsr	_LVOFindTask(a6)		| find ourselves
	move.l	D0,A0
	move.l	#-1,184(A0)	| pr_WindowPtr: no more system requesters (insert volume, write protected...)

.no_forbid:

	lea		_custom,a5
	lea		debug_copperlist,a0
	move.l	a0,cop1lc(a5)
	
	lea		background_buffer,a0
	jbsr	align_for_fmode
	move.l	a0,background_ptr
	
	
	lea		fg_screen_buffer_1,a0
	jbsr	align_for_fmode
	move.l	a0,fg_screen_data_1
	move.l	a0,playfield_drawn_screen_ptr
	move.l	a0,playfield_displayed_screen_ptr



	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
	lea		fg_screen_buffer_2,a0
	jbsr	align_for_fmode
	move.l	a0,fg_screen_data_2
	move.l	a0,playfield_displayed_screen_ptr
	.endif
		
	* set them even if reset by game afterwards
	* avoiding ugly stripe bitplane effect at startup

	bsr		set_bob_bitplanes

	move.w	#TOTAL_NB_COLORS*2,d0
	lea		palette,a0
	lea		tiles_colors,a1
	bsr		load_palette
	

	move.l	cheat_flags,d0
	jeq		1f
	move.b	d0,d1
	and.b	#3,d1
	jeq		2f
	* cheat key disable highscore only if used
	st.b	cheat_used
2:
	btst	#0,d0
	sne		invincible_flag

	BTST	#1,d0
	sne		infinite_lives_flag
	btst	#2,d0

0:
1:
	move.b	difficulty_level+3,d0
	and.b	#3,d0
	
	moveq	#0,d0
	move.b	start_level_option+3,d0

	move.b	d0,start_level
	
	move.l	misc_options,d1
	btst	#0,d1
	sne		frameskip
	.ifndef	RELEASE
	btst	#31,d1
	sne		break_at_startup_flag
	.endif
	
	**move.b	d0,dip_switches_2


	

	move.l	cheat_flags,d0
	btst	#0,d0
	beq.b	0f
	st		cheat_used
	*bset	#6,dip_switches_2
0:
	btst	#1,d0
	beq.b	0f
	st		infinite_lives_flag
	st		cheat_used
0:
	btst	#2,d0
	beq.b	0f
	st		cheat_used
0:
	move.l	cheat_flags,d0
	btst	#3,d0
	beq.b	0f
	st		cheat_used
	*bset	#5,dip_switches_2
0:
	
	move	#0x80,d1	| demo sounds on always
	move.l	start_lives(pc),d0
	or.b	d0,d1
	move.l	difficulty_level(pc),d0
	ror.b	#4,d0
	or.b	d0,d1
	
	move.b	d1,dip_switches_2
	
	jsr	 _detect_controller_types 
	clr.b	controller_joypad_0
	clr.b	controller_joypad_1

	jra		demo_game


	
* < D0: bcpl string (with leading size byte)
* < A1: dest C string
bcpl_arg_string_copy:
    movem.l D0-D2/A0-A1,-(a7)
	lsl.l	#2,d0
	moveq.l	#0,d2
    move.l  d0,a0
	move.b	(a0)+,d2	| size
	beq.b	1f
	subq	#1,d2
0:
	move.b	(a0)+,(a1)+
	dbf		d2,0b
1:
    movem.l (a7)+,D0-D2/A0-A1
    rts


bcpl_string_to_int:
    movem.l A0/A1,-(a7)
    lea temp_filename_buffer(pc),a1
    bsr bcpl_arg_string_copy
    * convert to integer
    move.l  a1,a0
    * < A0: pointer on C string
    * > D0: value
    * > D1: -1 if ok, position of the string if error
    bsr parse_integer
    movem.l  (a7)+,a0/a1
	rts
	
* parse integer from string
* < A0: pointer on C string
* > D0: value
* > D1: -1 if ok, position of the string if error
parse_integer:
    movem.l  d2/d3,-(a7)
    * go to end of string
    moveq.l #-1,d1
.loop1:
    addq.l  #1,d1
    tst.b   (a0,d1.w)
    bne.b   .loop1
    * d1 is the number of chars
    moveq.l #0,d0
    moveq.l #0,d2
    subq.l  #2,d1   | 10th power minus 1
.loop2:
    move.b  (a0)+,d2
    beq.b   .out
    
    cmp.b   #32,d2
    beq.b   .skip
    sub.b   #48,d2
    bcs.b   .error
    cmp.b   #10,d2
    bcc.b   .error
    move.w  d1,d3
    bmi.b   .doadd
.muloop:
    mulu    #10,d2
    dbf d3,.muloop
.doadd:
    add.l   d2,d0
.skip:
    subq.l  #1,d1
    bra.b   .loop2
.out:    
    movem.l  (a7)+,d2/d3
    rts
.error:
    moveq.l #0,d0
    bra.b   .error
	
    * thanks Toni for this 1.3 read argument code
BCPL_RdArgs = 78
	
	* a1 = pointer to result array. Must be LONG aligned!
	* a0 = formatting string. BSTR!
	* d0 = size of result array (number of LONGs)
get_args_BCPL:
	movem.l d2/d3/d4,-(sp)
	move.l d0,d3
	moveq #BCPL_RdArgs,d0
	move.l a0,d1
	lsr.l #2,d1
	move.l a1,d2
	lsr.l #2,d2
	moveq #0,d4
	bsr.s call_bcpl
	movem.l (sp)+,d2/d3/d4
	rts

	* d0 = gv index
	* d1-d4 = bcpl parms

BCPL_STACK = 3000

call_bcpl:
	movem.l d2-d7/a2-a6,-(sp)

	move.l d0,d6
	move.l d1,d5

	move.l 4.w,a6
	move.l	_dosbase(pc),a5


	sub.l a1,a1
	jsr	_LVOFindTask(a6)
	move.l d0,a4

	* allocate BCPL stack
	move.l #BCPL_STACK,d0
	move.l #65536+1,d1
	jsr	_LVOAllocMem(a6)
	move.l d0,d7
	beq.s 0f
	
	movem.l d7/a5/a6,-(sp)

	moveq #0,d0
	move.l d5,d1
	sub.l a0,a0
	move.l d7,a1
	lea 3*4(a1),a1
	move.l 136(a4),a2
	add.w	d6,d6
	add.w	d6,d6
	move.l 0(a2,d6.w),a4
	movem.l 46(a5),a5/a6
	jsr (a5) | call bcpl!
	
	movem.l (sp)+,d7/a5/a6

0:
	move.l d7,a1
	move.l #BCPL_STACK,d0
	jsr	_LVOFreeMem(a6)


	movem.l (sp)+,d2-d7/a2-a6
	rts



* < D0: sprite X
* < D1: sprite Y
* < D2: sprite code & flags
* < D3: sprite color (clut index, no flip information)
* > D6: allocated sprite index
alloc_sprite:
	* first pass: find a free sprite next to a sprite with
	* same clut
	lea		host_sprites(pc),a2
	moveq	#0,d6
0:
	cmp.b	(SPRITE_CLUT,a2),d3
	bne.b	10f
	* allocated (else would be -1/invalid) + same clut
	* check even/odd index
	btst	#0,d6
	beq.b	1f
	* odd: check if previous entry is free
	tst.b	(SPRITE_X-SPRITE_SIZEOF,a2)
	beq.b	8f
	tst.b	(SPRITE_Y-SPRITE_SIZEOF,a2)
	bne.b	10f
8:
	* previous entry is free, same clut: we can use that
	* entry, no color conflict
	lea		(-SPRITE_SIZEOF,a2),a2
9:
	move.b	d0,(a2)+		| X
	move.b	d1,(a2)+		| Y
	move.b	d2,(a2)+		| code
	move.b	d3,(a2)+		| clut (no flip information)
	rts						| done
1:
	* even: check if next entry is free
	tst.b	(SPRITE_X+SPRITE_SIZEOF,a2)
	beq.b	2f
	tst.b	(SPRITE_Y+SPRITE_SIZEOF,a2)
	bne.b	10f
2:
	* next entry is free, same clut: we can use that
	* entry, no color conflict
	lea		(SPRITE_SIZEOF,a2),a2
	bra.b	9b
10:
	* next entry
	addq.w	#SPRITE_SIZEOF,a2
	addq	#1,d6
	cmp.w	#NB_HOST_SPRITES,d6
	bne.b	0b
	* second pass if first pass failed (could not match
	* a pair with one occupied slot with compatible clut,
	* which happens when there are very few sprites
	* displayed): we have to find 2 consecutive free slots

	lea		host_sprites(pc),a2
	moveq	#0,d6
11:
	* we consider that a sprite is not allocated
	* if one of the coordinates is zero (real game
	* doesn't care and sets X to 255, and Y to 0 at times
	tst.b	(SPRITE_Y,a2)
	beq.b	12f
	tst.b	(SPRITE_X,a2)
	bne.b	20f
12:
	* not allocated: test odd sprite
	tst.b	(SPRITE_Y+SPRITE_SIZEOF,a2)
	jeq	9b
	tst.b	(SPRITE_X+SPRITE_SIZEOF,a2)
	jeq	9b		| ok, both slots are free, allocate the first one
20:
	* next sprite pair
	lea		(2*SPRITE_SIZEOF,a2),a2
	addq	#2,d6
	cmp.w	#NB_HOST_SPRITES,d6
	bne.b	11b
	
	* third pass: last chance/emergency: there ARE free slots
	* but maybe too many different cluts so we can't find a suitable slot.
	* In that case, pick the first free slot
	*
	lea		host_sprites(pc),a2
	moveq	#0,d6
21:
	tst.b	(SPRITE_X,a2)
	beq.b	9b		| ok, a slot is free, allocate it
	tst.b	(SPRITE_Y,a2)
	beq.b	9b		| ok, a slot is free, allocate it
30:
	* next sprite
	lea		(SPRITE_SIZEOF,a2),a2
	addq	#1,d6
	cmp.w	#NB_HOST_SPRITES,d6
	bne.b	21b
	* just cannot happen
	* if we reach that point there's a big problem, break if dev mode
	* hopefully if we save buffer in A1 we can reproduce the issue at will!
	.ifndef	RELEASE
	lea			sprite_buffer(pc),a1
	lea			sprite_allocation_error,a0
	jbsr	osd_break
	.endif
	* in release mode, just discard this sprite, maybe we'll get away with it!
	rts


demo_game:
		move		#0x4000,_custom+intena						| disable interrupts
		move		#0x7FFF,_custom+intreq						| ack all interrupts
		bsr			platform_init					| amiga-specific init
		
0:	
	.ifndef	RELEASE
	* compute ram start for dev mode
	* align so real addresses LSW match actual arcade addresses
	* and lower 16-bit match original RAM & even ROM offsets
	*
	lea		dev_ram_buffer,a6
	move.l	a6,d0
	clr.w	d0
	move.l	d0,d1
	add.l	#0x11800,d1
	move.l	d1,ram_start_1800		| memory (0x1800-0xFFFF)
	
	* relocate rom tables just after shared RAM
	* memory is contiguous (only 1 segment of memory RAM+ROM)
	* and 6809 memory access is way faster (no bank switching)
	
	* copy the ROM data
	add.l	#ROM_START-0x1800,d1
	move.l 	d1,a1
	move.w	#(0x10000-ROM_START)/4-1,d0
	lea		rom_base,a0
0:
	move.l	(a0)+,(a1)+
	dbf		d0,0b
	.else
	* release mode

	* copy the ROM data after RAM
	lea		ram_buffer+ROM_START-0x1800,a1
	move.w	#(0x10000-ROM_START)/4-1,d0
	lea		rom_base,a0
0:
	move.l	(a0)+,(a1)+
	dbf		d0,0b
	.endif
	
	
	GET_MEMORY_START_AND_DP
	* patch rom
	add.l	#0xA855,a6
	lea		jotd_message(pc),a1
0:
	move.b	(a1)+,d0
	jeq	0f
	move.b	d0,(a6)+
	jra	0b
0:	
	GET_MEMORY_START_AND_DP
	jbsr	cpu_init
	jmp			reset_6000					| pass control to the cpu core
		
jotd_message:	
	.asciz	"AMIGA@PORT@BY@JOTD@"
	.align  2
do_irq:
	* set base for RAM
	jbsr	cpu_init
	GET_MEMORY_START_AND_DP
	jra			irq_6600					| pass control to the cpu core
	
* just in case some hardware calls nmi
_nmi:
	move.w	#0x7FFF,_custom+intreq
	move.w	#0x7FFF,_custom+intreq
	rts
	
_vblank:
    movem.l d0-d7/a0-a6,-(a7)
	lea		_custom,a5
	move.w	(intreqr,a5),d0
	btst	#5,d0
	beq.b		1f

	clr.b	vbl_sync_flag
	
	move.l	_joypad_state(pc),d1
	moveq	#1,d0
	jsr	_read_joystick
	move.l	d0,_joypad_state
	
	* CD32 "play" is disabled but it's free to read
	* 3rd button on a Sega 3-button so 3rd button is pause
	btst	#JPB_BTN_PLAY,d0
	beq.b	0f
	btst	#JPB_BTN_PLAY,d1
	bne.b	0f
	bsr		toggle_pause
0:
	* here music doesn't loop. We have to stop it when it ends
	move.w	music_tick,d1
	beq.b	13f
	bmi.b	13f		| negative: infinite, not interruptible
	
	subq	#1,d1

	move.w	d1,music_tick
	bne.b	13f
	jbsr		osd_music_stop
13:
	
	* ack vbl twice (040/pistorm bug)
	move.w	#0x20,(intreq,a5)
	move.w	#0x20,(intreq,a5)	
	jra	3f
1:
	* has to be copper

	* we're going to ack copper & software interrupt now
	* do it twice (040/pistorm bug)
	move.w	#0x14,(intreq,a5)
	move.w	#0x14,(intreq,a5)

	tst.b	pause_flag
	jne	23f



	* declare that we're in interrupt mode so osd_disable_interrupts/osd_enable_interrupts
	st.b	interrupt_mode
	* is level 1 interrupt set? that would mean that mid-screen interrupt
	* is the source of the interrupt
	btst	#2,d0
	beq.b	2f
	* mid-screen copper interrupt, must occur once every 5 times
	* to simulate ~60 Hz on 50 Hz display
	move.b	mid_screen_interrupt_count,d0
	addq.b	#1,d0
	cmp.b	#5,d0
	bne.b	1f
	jbsr		do_irq
	clr.b	interrupt_mode	
	clr.b	d0
1:
	move.b	d0,mid_screen_interrupt_count
	jra		3f
2:


	
	subq.w	#1,delay_timer
		
	jbsr		do_irq
	jbsr	really_update_scroll
	
	tst.b	frameskip
	jeq		0f
	eor.b	#1,flip_flop
	jeq		23f
0:
	jbsr		really_update_tiles
	jbsr		really_update_sprites
	
	
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
	bsr		switch_screen_buffers
	.endif
	
23:


3:
    movem.l (a7)+,d0-d7/a0-a6
    rte
	
	.ifndef	RELEASE

	.macro	CHECK_ZERO_MSW	reg
	swap	\reg
	tst		\reg
	jeq		0f
	move.w	(6,a7),d6
	BREAKPOINT		"\reg MSW is not zero, PC=check d6!"
0:
	swap	\reg
	.endm
	
osd_log_cpu:
	* first, check that registers don't have a wrong longword mask
	CHECK_ZERO_MSW	d1
	CHECK_ZERO_MSW	d2
	CHECK_ZERO_MSW	d3
	CHECK_ZERO_MSW	d4
	move.w	(6,a7),last_known_m6809_pc

	move.l	a6,-(a7)
	* check if cpu log is enabled
	tst.b	cpu_log_enable
	jeq		445f
	move.l	log_ptr,a6
	move.w	(10,a7),(a6)+	| the PC
	move.l	d1,-(a7)
	rol.w	#8,d1
	move.b	d0,d1
	rol.w	#8,d1   | make D, make sure that not too many diffs
	move.w	d0,(a6)+
	move.w	d1,(a6)+
	move.w	d2,(a6)+
	move.w	d3,(a6)+
	move.w	d4,(a6)+
	cmp.w	#0xCAFE,(a6)  | hitting the protection buffer
	jne		444f
	BREAKPOINT	"cpu log buffer full!"
444:
	move.w	#0xDEAD,(a6)+
	move.l	a6,log_ptr
	move.l	(a7)+,d1
445:
	move.l	(a7)+,a6
	rts

* < D6: 0 disable, 1 enable
osd_cpu_logging_control:
	move.b	d6,cpu_log_enable
	rts
	.endif

osd_blitz:
	blitz
	rts

osd_get_last_known_pc:
	move.w	last_known_m6809_pc,d6
	rts

osd_break:
	* sends a WinUAE command to enter WinUAE debugger
	.ifndef	RELEASE
	move.l	D0,-(a7)
	pea     0.w
	* Normally it would point to where the result of the command is written, but since the last parameter (first pushed)
	* indicating the number of bytes to write is 0, nothing is written.
	pea     0.w	
	pea     1003f-1002f
	pea     1002f(pc)
	pea     -1.w
	pea     82.w
	jsr     0xf0ff60
	lea     24(sp),sp
	move.l	(a7)+,d0
	.endif
    rts
		
1002: .asciz    "AKS_ENTERDEBUGGER 1"
1003:
        .align	2

	

* < D0: number of 1/60Hz ticks
* can work with interrupts enabled or disabled
osd_wait:
	move.w	d0,delay_timer
	**jbsr	osd_is_vblank_interrupt_enabled
	tst.w	d0
	jne		2f
	* interrupts are disabled: timer isn't going to change
	* wait using vertical blank interrupt request (we don't need it!)
	clr.w	one_out_of_five
0:
	move.w	#0x20,_custom+intreq
	move.w	#0x20,_custom+intreq
1:
	move.w	_custom+intreqr,d0
	btst	#5,d0
	beq.b	1b
	addq.w	#1,one_out_of_five
	cmp.w	#5,one_out_of_five
	bne.b	5f
	subq.w	#1,delay_timer	
	clr.w	one_out_of_five
5:
	subq.w	#1,delay_timer
	beq.b	4f
	bpl.b	0b
4:
	rts
	
2:
	tst.w	delay_timer
	bne.b	2b
	rts


	
	
* 2 conditions I can think of:

* Z: set if not playing
is_game_playing:
	move.l	a6,-(a7)
	GET_MEMORY_START_AND_DP
	*tst.b	game_in_play_9669(a6)
	cmp.l	a6,a6
	move.l	(a7)+,a6
	rts
	
lose_all_lives:
	move.l	a6,-(a7)
	GET_MEMORY_START_AND_DP
	*move.b	#1,lives_9600(a6)					| no more lives
	*move.b	#0xf0,level_playing_flag_9000(a6)	| kill player
	move.l	(a7)+,a6
	rts

add_10000_points:
	move.l	a6,-(a7)
	GET_MEMORY_START_AND_DP
	movem.w	d0/d7,-(a7)
	*move.b	player_1_score_9663+2(a6),d0
	MOVEQ	#1,d7
	abcd	d7,d0
	*move.b	d0,player_1_score_9663+2(a6)
	movem.w	(a7)+,d0/d7
	move.l	(a7)+,a6
	rts

* we're going to scan for scroll values
really_update_scroll:
	GET_MEMORY_START_AND_DP
	lea	(0x1842,a6),a6		| disregard 2 first rows, hidden
	move.w	#NB_SCROLL_ROWS-1,d7
	lea		scroll_table,a2
	lea		scroll_row_copper_address_table,a1
	move.l		background_ptr,a4
0:
	* get LSB+MSB scroll value
	move.b	(0x400,a6),d5
	moveq	#0,d5		| TEMP
	rol.w	#8,d5
	move.b	(a6)+,d5
	move.l	(a1)+,a0	| get address of bpl1con value
	move.w	(a2,d5.w*4),(a0)	| set bplcon value
	move.l	a4,d0				| base address
	add.w	(2,a2,d5.w*4),d0	| bytes offset
	addq	#4,a0				| pointer on first bitplane
	movem.l	a0-a1/d0-d2,-(a7)
	jbsr	set_static_bitplanes
	movem.l	(a7)+,a0-a1/d0-d2
	
	add.w	#BG_NB_BYTES_PER_ROW*8,a4	| next row address
	dbf		d7,0b
	rts
	
	
* we're going to scan for dirty tiles (0x400 array)
* an optimization is to also have flags for 0x20-size regions
* if the value is 0, then no need to try to refresh the next
* 0x20 tiles. If screen tiles don't change, we read 0x20 bytes
* instead of 0x400 each frame.

really_update_tiles:
	lea		_custom,a5
	WAIT_BLIT
	GET_MEMORY_START_AND_DP
	lea		(0x3000,a6),a6
	lea		(0x800,a6),a5
	lea		tiles_row_flags(pc),a1
	moveq	#0,d3
3:
	tst.b	(a1)+
	jeq		2f
	lea		tiles_refresh_table(pc),a0
	subq.b	#1,(-1,a1)
	move.w	#0x3F,d2		| 0X40 cols!
	move.w	d3,d7
	lsl.w	#6,d7		| times 64, get offset for big dirty table
	add.w	d7,a0
0:
	tst.b	(a0)+
	jeq		1f
	subq.b	#1,(-1,a0)	| decrease dirty counter
	* read tile & color codes from RAM
	move.b	(a6,d7.w),d0
	move.b	(a5,d7.w),d1
	movem.l	d2/d3/d7/a0/a1/a5,-(a7)
	jbsr	update_bg_tile
	movem.l	(a7)+,d2/d3/d7/a0/a1/a5
1:
	addq	#1,d7
	dbf	d2,0b
2:
	addq	#1,d3
	cmp.w	#0x20,d3		| 20 rows
	jne		3b
	rts
	



really_update_sprites:
update_bobs_and_hw_sprites:
	
	***********************
	* erase previous BOBs *
	***********************
	move.l	bob_previous_drawn_sprites(pc),a4
	lea		_custom,a5
	* clear previous positions
	move.l	playfield_drawn_screen_ptr(pc),a1
	move.w	#NB_TARGET_SPRITES-1,d7
1:
	move.l	(a4),d1	| read X and Y
	jeq		11f		| x=y=0: inactive, skip
	move.l	d1,d0
	swap	d0		| get X
	* clear area where the sprite was
	clr.l	(a4)+			| ack deletion
	move.w	(a4)+,d4		| height
	move.w	(a4)+,d2		| width/clut index (if star)
	move.b	(a4)+,d3		| ignored
	move.b	(a4)+,d5

	and.w	#0x1F0,d0		| align on 16 lower bound
	move.w	#NB_TILE_PLANES,d3
	move.l		playfield_drawn_screen_ptr(pc),a1
	jbsr		clear_planes_any_blitter_internal

	dbf		d7,1b	
	bra.b	12f
11:
	lea	(PREVIOUS_SPRITE_SIZEOF,a4),a4
	dbf		d7,1b
12:	

	
	*********************************************
	* draw current BOBs from 6809 sprite memory *
	*********************************************


    lea _custom,A5
*	lea		sprite_groups(pc),a2
	GET_MEMORY_START_AND_DP
	lea		(0x183E,a6),a0		| sprite start
	lea		bob_table,a4
	move.w	#NB_TARGET_SPRITES/2-1,d7
	move.l	bob_previous_drawn_sprites(pc),a6
1:
	jbsr	update_one_bob
	subq.w	#2,a0
	dbf		d7,1b
2:
	rts
	
* * < A0: target sprite pointer
* 
* void trackfld_state::draw_sprites( bitmap_ind16 &bitmap, const rectangle &cliprect )
* {
* 	uint8_t *spriteram_1C00 = m_spriteram;
* 	uint8_t *spriteram_1800 = m_spriteram2;
* 	int offs;
* 
* 	for (offs = m_spriteram.bytes() - 2; offs >= 0; offs -= 2)
* 	{
* 		int attr = spriteram_1800[offs];
* 		int code = spriteram_1C00[offs + 1];
* 		int color = attr & 0x0f;
* 		int flipx = ~attr & 0x40;
* 		int flipy = attr & 0x80;
* 		int sx = spriteram_1C00[offs] - 1;
* 		int sy = 240 - spriteram_1800[offs + 1];
* 
* 
* 		/* Note that this adjustement must be done AFTER handling flip screen, thus */
* 		/* proving that this is a hardware related "feature" */
* 		sy += 1;
* 
* 
* 			m_gfxdecode->gfx(0)->transmask(bitmap,cliprect,
* 			code + m_sprite_bank1 + m_sprite_bank2, color,
* 			flipx, flipy,
* 			sx, sy,
* 			m_palette->transpen_mask(*m_gfxdecode->gfx(0), color, 0));
* 
* 		/* redraw with wraparound */
* 
* 			m_gfxdecode->gfx(0)->transmask(bitmap,cliprect,
* 			code + m_sprite_bank1 + m_sprite_bank2, color,
* 			flipx, flipy,
* 			sx - 256, sy,
* 			m_palette->transpen_mask(*m_gfxdecode->gfx(0), color, 0));
* 	}
* }

* < A0: sprite array
* < A2: sprite group table
* < A4: bob table
* < A5: custom
* < A6: previously drawn sprites array
* must preserve all of those, plus D7

update_one_bob:
	* X = 0 and Y = 0: disabled
	
	moveq	#0,d0
	moveq	#0,d1
	move.b	(TARGET_SPRITE_Y,a0),d1  | sprite Y
	jeq	2f			| Y set to 0: not shown
	move.b	(TARGET_SPRITE_X,a0),d0
	jeq	2f
0:

	.ifne	SPRITE_Y_CORRECTION
	add.w	#SPRITE_Y_CORRECTION,d1
	.endif
	.ifne	SPRITE_X_CORRECTION
	add.w	#SPRITE_X_CORRECTION,d0
	.endif
	
	neg.w	d1
	add.w	#241,d1
	
	moveq	#0,d2
	moveq	#0,d3
	move.b	(TARGET_SPRITE_ATTR,a0),d2
	move.b	(TARGET_SPRITE_CODE,a0),d3
	and.b	#0xF,d2		| CLUT


	* here D3 is code (with bank) and D2 is clut
	* log the usage
	
	.ifne	OPT_ENABLE_LOGGING
	movem.l	a2/d2-d3,-(a7)
	lea		sprite_log_table,a2
	lsl.w	#4,d3		| 16 cluts
	add.w	d2,d3		| clut offset

	st.b	(a2,d3.l)
	movem.l	(a7)+,a2/d2-d3
	.endif

	move.w	#SPRITE_HEIGHT,d6
*	* check if it is a grouped sprite in the table with 0x100 pre-computed entries
*	tst.b	(a2,d3.w)
*	jeq		10f
*	* grouped 32x16 sprite. They usually follow each other
*	btst	#6,(TARGET_SPRITE_ATTR,a0)
*	jne		100f
*	* flipped: only display 0x1xx sprite
*	sub.w	#0x100,d3
*	jcs		2f
*	jra		101f
*100:
*	* not flipped: only display 0x0xx sprite
*	cmp.w	#0x100,d3
*	jcc		2f	
*101:
*	add.w	d6,d6		| double the height to add
*	* end grouped 16x16 sprite
*10:

	add.w	d3,d3
	add.w	d3,d3
	move.l	(a4,d3.w),d4		| get pointer from bob table
	jeq		2f
	* entry is valid, now what about clut?
	
	move.l	d4,a1
	add.w	d2,d2
	add.w	d2,d2
	move.l	(a1,d2.w),d4
	jeq		22f

	* re-load properties (for X/Y flip)
	move.b	(TARGET_SPRITE_ATTR,a0),d3
	move.l	a0,-(a7)
	move.l	d4,a0
	* flip bits are exactly like Pooyan/Gyruss
    * flip_x = ~D3 & 0x40
    * flip_y =  D3 & 0x80
	btst	#7,d3
	jeq		101f
	* mirror
	add.w	#((NB_BOB_PLANES+1)*4+8),a0
101:
	move.w	(a0)+,d4		| height
	move.w	(a0)+,d5		| width
	move.w	(a0)+,d2		| Y-offset
	btst	#6,d3
	jne		101f
	* flipped: offset is different: it's 8 or 16-height-offset
	neg.w	d2
	sub.w	d4,d2
	add.w	d6,d2		| tile height is 8 or 16 pixels
101:
	add.w	d2,d1

	* A0 points on the first bitplane of the bob

	move.l		playfield_drawn_screen_ptr(pc),a1
	
	* D0 and D1 are already set
	move.w	(a0)+,d6				| active plane mask
	move.l	(NB_BOB_PLANES*4,a0),d2
	jeq	21f		| mask is zero: blank tile => skip
	move.l	d2,a3
	moveq	#0,d2	| no y-clip
	* note down that this bob will have to be erased
	move.w	d0,(a6)+			| store current sprite attributes to previous ones
	move.w	d1,(a6)+			| store current sprite attributes to previous ones
	move.w	d4,(a6)+			| store height
	move.w	d5,(a6)+			| store width in bytes
	clr.b	(a6)+				| not a star
	move.b	d6,(a6)+		    | active planes (helps for erase)
	move.w	d5,d2			    | width in bytes, 4 for 16 pixels+shift
	moveq	#0,d5			    | Y-offset

	btst	#6,d3
	jne		101f
	* flip
	neg.w	d4
101:


	moveq	#NB_BOB_PLANES,d3		| 5 planes

	bsr		blit_planes_any_internal_cookie_cut
	move.l	(a7)+,a0
	rts
21:
	move.l	(a7)+,a0
2:
	lea		(PREVIOUS_SPRITE_SIZEOF,a6),a6
	rts

22:
	.ifndef	RELEASE
	lsr.w	#2,d2		| clut
	lsr.w	#2,d3		| code
	move.w	#0xF00,_custom+color
	.endif
	jra		2b

*sprite_groups:
*	.include	"sprite_groups.68k"
	
	.ifdef	HW_SPRITES
update_one_hw_sprite:
	* code = 0 and clut = 0 => disabled ?? to check
	moveq	#0,d2
	move.b	(TARGET_SPRITE_CODE,a0),d2
	jeq	2f

	move.b	(TARGET_SPRITE_X,a0),d0
	add.w	d2,d2
	add.w	d2,d2
	btst    #2,(TARGET_SPRITE_ATTR,a0)
	jeq		0f
	addq	#2,d2
0:
	cmp.b	#1,(a6,d2.w)
	jne		2f		| not a hw sprite: zap
	* get the actual sprite index for our engine
	move.b	(1,a6,d2.w),d2
	and.w	#0xFF,d2
	* it is a HW sprite all right
	lsl.w	#4,d2	| 4 pointers for each sprite
	move.b  (TARGET_SPRITE_CODE,a0),d3
	btst	#0,d3
	jeq		10f
	addq	#8,d2			| mirror sprite couple
10:
	lea		(a4,d2.w),a5	| pointer on first sprite

	moveq	#0,d0
	moveq	#0,d1
	move.b	(TARGET_SPRITE_Y,a0),d1  | sprite Y
	beq.b	2f			| Y set to 0: not shown
	not.b	d1

	move.b	(TARGET_SPRITE_X,a0),d0  | sprite X
	
	.ifne	SPRITE_Y_CORRECTION
	add.b	#SPRITE_Y_CORRECTION,d1
	.endif
	.ifne	SPRITE_X_CORRECTION
	add.b	#SPRITE_X_CORRECTION,d0
	.endif

	* D0 and D1 are already set

	sub.w	#16,d0	| move each sprite 16 bits to the left
	bmi.b	2f			| X < 0 after correction: can't show
	bsr		store_sprite_pos

	
	* first sprite of couple
	move.l	(a5)+,a3
	move.l	d0,(a3)
	move.l	a3,d1
	* store sprite pointer in copperlist
	move.w	d1,(4,a2)
	swap	d1
	move.w	d1,(a2)
	* second sprite of couple
	BSET	#7,d0		| attach bit set
	move.l	(a5),a3
	move.l	d0,(a3)
	move.l	a3,d1
	* store sprite pointer in copperlist
	move.w	d1,(4+8,a2)
	swap	d1
	move.w	d1,(8,a2)
	add.w	#0x10,a2	| advance in sprite copperlist part
2:
	
	rts
	.endif
	

	.ifne	OPT_ENABLE_LOGGING

osd_dump_logs:
	move.w	sr,-(a7)
	move.w	#0x2700,SR
	movem.l	d0-a6,-(a7)
	move.l	_resload(pc),a2
	lea		sprite_log_table,a1
	lea		sprite_log_name(pc),a0
	move.l	#16*NB_POSSIBLE_SPRITES,d0
	jbsr	resload_SaveFile(a2)
	
	move.l	_resload(pc),a2
	lea		character_log_table,a1
	lea		character_log_name(pc),a0
	move.l	#16*NB_POSSIBLE_TILES,d0
	jbsr	resload_SaveFile(a2)
		
*	GET_MEMORY_START_AND_DP
*	lea		sprites_ram_name_A000(pc),a0
*	lea	(0x2000,a6),a1		| sprites
*	move.l	#0x200,d0
*	jbsr	resload_SaveFile(a2)
*	lea		sprites_ram_name_A200(pc),a0
*	lea	(0x2200,a6),a1		| sprites
*	move.l	#0x200,d0
*	jbsr	resload_SaveFile(a2)
	
	jbsr	save_cpu_log
	
    movem.l (a7)+,d0-a6
	move.w	(a7)+,SR
	rts

save_cpu_log:
	move.l	_resload(pc),a2
	lea		log_buffer,a1
	move.l	log_ptr,d0
	sub.l	a1,d0
	jeq		0f
	move.l	log_ptr,a0
	* add RAM & ROM base in the end
	move.l	a6,(a0)+
	move.l	#rom_base,(a0)+
	addq	#8,d0
	lea		cpu_log_name(pc),a0
	jbsr	resload_SaveFile(a2)
0:	
	rts
	
sprites_ram_name_4040:
	.asciz	"sprite_ram_4040"
sprites_ram_name_A000:
	.asciz	"sprite_ram_A000"
sprites_ram_name_A200:
	.asciz	"sprite_ram_A200"
sprite_log_name:
	.asciz	"used_sprites"
character_log_name:
	.asciz	"used_tiles"
cpu_log_name:
	.asciz	"cpu_log"
	.align	2
	.endif	
	
* what: blits 16x? data on one plane, cookie cut
* args:
* < A0: pointers on 16x? data
* < A1: plane  (40 rows)
* < A3: source mask for cookie cut (16x16)
* < D0: X
* < D1: Y
* < D2: source y-offset
* < D3: height of data
* trashes: D0-D1
blit_planes_cookie_cut_16x:
    lea _custom,A5
	move.w	d2,d5
	move.w	d3,d4
	moveq	#NB_BOB_PLANES,d3		| 4 planes
    moveq  #4,d2       | 16 pixels + 2 shift bytes
* < A5: custom
* < D0.W,D1.W: x,y
* < A0: source (pointer on array of planes)
* < A1: destination fg plane, also background to mix with cookie cut fg plane
* < A3: source mask for cookie cut
* < D2: width in bytes (inc. 2 extra for shifting)
* < D3: number of planes
* < D4: height. If negative, source is copied with negative modulo (flip)
* < D5: y offset for source planes
* < D7: blit mask (not considered, optim, -1 all through the game)
* blit mask set
* returns: start of destination in A1 (computed from old A1+X,Y)
* trashes: a1
blit_planes_any_internal_cookie_cut:
    movem.l d0-d7/a4,-(a7)
    * pre-compute the maximum of shit here
	tst.w	d4
	bpl.b	1f
	sub.w	d4,d1	| pre-add height to d1
	subq.w	#1,d1	| minus one
1:	
	tst	d1
    beq.b   2f    | optim
    lea		mulFG_NB_BYTES_PER_ROW_table(pc),a4
	.ifdef	NO68020
	add.w	d1,d1
    move.w  (a4,d1.w),d1	| y times 40
	.else
    move.w  (a4,d1.w*2),d1	| y times 40
	.endif
2:
	lea		cookie_cut_blit_table(pc),a4
	
    move.w  d0,d6
    lsr.w   #3,d0			| X displacement in bytes
	*bclr	#0,d0			| no need, it will be even
    and.w   #0xF,d6
	.ifdef	NO68020
	add.w	d6,d6
	add.w	d6,d6
	move.l	(a4,d6.w),d7
	lea		cookie_cut_mask_blit_table(pc),a4
	move.l	(a4,d6.w),d6
	.else
	move.l	(a4,d6.w*4),d7
	lea		cookie_cut_mask_blit_table(pc),a4
	move.l	(a4,d6.w*4),d6
	.endif
3:   
    add.w   d0,d1
4:
    * make offset even. Blitter will ignore odd address
    * but a 68000 CPU doesn't and since we RETURN A1...
    *bclr    #0,d1
    add.w   d1,a1       | plane position (D1 < 0x7FFF, 288*40=0x2D00)
	move.w	#FG_NB_BYTES_PER_ROW,d0
	tst.w	d4
	bpl.b	5f
	neg.w	d0
	neg.w	d4    | make d4 positive again
5:
    sub.w   d2,d0       | blit width
    lsl.w   #6,d4
    lsr.w   #1,d2
    add.w   d2,d4       | blit height
    * always the same settings (ATM)
	moveq	#-2,d2
	add.w	d5,a3			| apply y offset to mask too (y offset looks wrong)
	
    * now just wait for blitter ready to write all registers
	WAIT_BLIT
   
    * blitter registers set

	move.w d2,bltamod(a5)		|A modulo=bytes to skip between lines
	move.w d2,bltbmod(a5)		|B modulo=bytes to skip between lines
	moveq	#0,d2
    move.w  d2,bltalwm(a5)
	
    move.w  d0,bltcmod(a5)	|C modulo
    move.w  d0,bltdmod(a5)	|D modulo
					
	subq	#1,d3
	beq.b	7f
	subq	#1,d3
6:
	jbsr	process_1_plane
	
	lea		(FG_SCREEN_PLANE_SIZE,a1),a1
	dbf		d3,6b
7:
	jbsr	process_1_plane
    
    movem.l (a7)+,d0-d7/a4
    rts
	
process_1_plane:
	move.l (a0)+,d0
	beq.b	60f
	move.l	d0,a4
	add.w	d5,a4		| add Y offset
	bra.b	61f
60:
	.ifeq	OPT_IGNORE_ZERO_BITPLANE
	WAIT_BLIT
	* source is 0: just apply mask (less bandwidth lost) and change bltcon
	move.l	d6,bltcon0(a5)	| sets con0 and con1: C-A->D cookie cut, B fixed
 	move.w	d2,bltbdat(a5)	|B word is zero
	move.l	a1,bltcpt(a5)	|pristine background top (bottom) left corner
	move.l	a1,bltdpt(a5)	|destination top (bottom) left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
	.endif
	rts
61:
	WAIT_BLIT
	* non-zero: set data source & bltcon
	move.l  a3,bltapt(a5)	|source graphic top left corner (mask)
	move.l	d7,bltcon0(a5)	| sets con0 and con1: C-A+B->D cookie cut full
	move.l	a4,bltbpt(a5)	|source graphic top left corner
	move.l	a1,bltcpt(a5)	|pristine background top (bottom) left corner
	move.l	a1,bltdpt(a5)	|destination top (bottom) left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
	rts

	.macro	GEN_MINTERM_TABLE	name,value
\name\()_table:
	.set	shift,0
	.rept	16
	.long	(shift<<28)+(shift<<12)+(\value<<16)
	.set	shift,shift+1
	.endr
	.endm
	
	.macro	GEN_MINTERM_TABLE_2	name,value
\name\()_table:
	.set	shift,0
	.rept	16
	.long	(shift<<28)+(\value<<16)
	.set	shift,shift+1
	.endr
	.endm
	
	GEN_MINTERM_TABLE	cookie_cut_blit,0x0FCA
	GEN_MINTERM_TABLE_2	cookie_cut_mask_blit,0x0BCA


* < D0,D1: x,y
* < A1: foreground plane pointer (often first plane!)
* < D2: width in bytes (inc. 2 extra for shifting)
* < D3: nb planes to clear
* < D4: blit height
* < D5: plane mask

* trashes D0-D6/A2
clear_planes_any_blitter_internal:
    * pre-compute the maximum of shit here
	move.w	d1,d6
    beq.b   1f    | optim
	* check if y start + height > Y_MAX
	* (ignores case where y = 0, no risk)
	add.w	d4,d6
	sub.w	#Y_MAX,d6
	bmi.b	0f
	* y start + height > Y_MAX: clip height
	sub.w	d6,d4
	beq.b	10f
	bpl.b	0f
10:
	* null or negative height after clipping: out
	rts
0:
    lea mulFG_NB_BYTES_PER_ROW_table(pc),a2
    add.w   d1,d1
    move.w  (a2,d1.w),d1
1:
    and.w   #0x1F0,d0
    beq.b   2f				| zero X optimization
    lsr.w   #3,d0
    add.w   d0,d1
2:   
    add.w   d1,a1       | plane position (always even)

	* reuse d1 for bltcon0
	moveq	#1,d1
	ror.l	#8,d1     | AKA move.l  #0x01000000,d5   | minterm useD & rect clear (0xA) 

	move.w #FG_NB_BYTES_PER_ROW,d0
	bclr	#0,d2		| make sure D2 is even (else strange things occur!)
    sub.w   d2,d0       | blit width

	move.w	d4,d6		| save height
    lsl.w   #6,d4
    lsr.w   #1,d2
    add.w   d2,d4       | blit height+width

    * now just wait for blitter ready to write all registers
	WAIT_BLIT
    
	move.l	#-1,bltafwm(a5)
	move.l d1,bltcon0(a5)	
    move.w  d0,bltdmod(a5)	|D modulo
	
	subq	#1,d3
	jeq		4f
	subq	#1,d3
	jra		31f
3:
*	lsr.b	#1,d5
*	jcc		32f
	BTST	#6,(dmaconr,a5)
	jra		31f
	* blitter is busy: do it with cpu for that plane
	move.w	d6,d2
	subq	#1,d2
	move.l	a1,a2
	* no need to know which width in the case of gyruss there are
	* only 32 bit erase / blits
55:
	clr.l	(a2)
	lea		(FG_NB_BYTES_PER_ROW,a2),a2
	dbf		d2,55b
	jra 	32f			| should send to blitter operation next time
	
31:
	move.l a1,bltdpt(a5)	|destination top left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
32:
	lea		(FG_SCREEN_PLANE_SIZE,a1),a1
	dbf		d3,3b
4:
*	lsr.b	#1,d5
*	jcs		5f
*	rts
*5:
	* last plane: if blitter busy, do with CPU
	BTST	#6,(dmaconr,a5)
	jra		31f
	* blitter is busy: do it with cpu for that plane
	move.w	d6,d2
	subq	#1,d2
	move.l	a1,a2
	* no need to know which width in the case of gyruss there are
	* only 32 bit erase / blits
55:
	clr.l	(a2)
	lea		(BG_NB_BYTES_PER_ROW,a2),a2
	dbf		d2,55b
	rts
31:
	move.l a1,bltdpt(a5)	|destination top left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
    rts

	
sprite_buffer:
	.skip	NB_TARGET_SPRITES*SPRITE_SIZEOF
	
bob_previous_positions_1:
	ds.b	NB_TARGET_SPRITES*PREVIOUS_SPRITE_SIZEOF
bob_previous_drawn_sprites:
	.long	bob_previous_positions_1
bob_previous_displayed_sprites:
	.ifeq	OPT_ENABLE_DOUBLE_BUFFERING
	.long	bob_previous_positions_1
	.else
	.long	bob_previous_positions_2	
bob_previous_positions_2:
	ds.b	NB_TARGET_SPRITES*PREVIOUS_SPRITE_SIZEOF	
	.endif

		
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
switch_screen_buffers:

	* let's switch screen buffers, background (chars)
	* toggle fg planes (double buffering)
	* also toggle previous sprite positions
	lea		playfield_drawn_screen_ptr(pc),a0
	lea		bob_previous_positions_1(pc),a2
	lea		bob_previous_positions_2(pc),a3
	move.l	fg_screen_data_1,a1
	move.l	fg_screen_data_2,a5
	* also switch previous state memory
	cmp.l	(a0),a1
	bne.b	2f
	* screen data 1 is displayed screen
	* set it to drawn screen
	exg		a1,a5
	exg		a2,a3
2:
	move.l	a1,(a0)
	move.l	a5,playfield_displayed_screen_ptr
	move.l	a3,bob_previous_displayed_sprites
	move.l	a2,bob_previous_drawn_sprites

	* fetch 0-scroll value from table
	* apply to both plane sets (tiles & bobs)
	lea		scroll_table,a2
	move.w	(a2),d0
	move.w	d0,reset_bplcon1_1
	move.w	d0,reset_bplcon1_2

 	lea	tiles_bitplanes+2,a0
    move.l	background_ptr,d0
	jbra		set_static_bitplanes
	.endif
	
	
store_system:
	tst.l	_resload
	beq.b	0f
	rts
0:
	* system copper
	
	move.l	4.W,a6
	move.w	AttnFlags(a6),d0
	btst	#AFB_68010,d0
	beq.b	1f
	lea	get_vbr,a5

	jsr		_LVOSupervisor(a6)
	move.l	d0,system_vbr
1:
	move.w	AttnFlags(a6),d0
	btst	#AFB_68020,d0
	beq.b	0f				| no 68020: disable stars & switch to 25FPS
	
	* check fastmem
	pea		2f(pc)	
2:
	move.l	(a7)+,d0
	cmp.l	#0x200000,d0
	bcc.b	1f				
0:
	* no whdload, no fastmem/68020: assume slow switch to 25 FPS
	* if running on PiStorm, well, too bad use whdload
	*
	* note: game crawls on vanilla A1200 too if stars are on
	*
	st.b	frameskip
1:

	lea	_custom,a6
	move.w	intenar(a6),old_intena
	move.w	dmaconr(a6),old_dmacon
	lea		old_sysvectors,a0
	move.l	system_vbr(pc),a1
	move.l	(0x68,a1),(a0)+
	move.l	(0x6c,a1),(a0)+
	move.l	(0x70,a1),(a0)+
	move.l	(0x74,a1),(a0)+
	move.l	(0x78,a1),(a0)+
	move.l	(0x7C,a1),(a0)+
	rts

restore_system:	
	move.l	system_vbr(pc),a0
	lea	_custom,a6
	jsr		_mt_remove_cia

	move.w	#0x4000,intena(a6)	| ints off
	lea		old_sysvectors,a0
	move.l	system_vbr(pc),a1
	move.l	(a0)+,(0x68,a1)
	move.l	(a0)+,(0x6c,a1)
	move.l	(a0)+,(0x70,a1)
	move.l	(a0)+,(0x74,a1)
	move.l	(a0)+,(0x78,a1)
	move.l	(a0)+,(0x7C,a1)


	bclr	#6,0xbfee01

	lea	_custom,a6
	move.w	old_intena,d0			| get old val
	and.w	#0x3fff,d0
	eor.w	#0x3fff,d0
	move.w	d0,intena(a6)		| clr bits
	eor.w	#0x3fff,d0
	or.w	#0xc000,d0		
	move.w	d0,intena(a6)		| set bits and main

	move.w	old_dmacon,d0			| get old val
	and.w	#0x3fff,d0
	eor.w	#0x3fff,d0

***		and.w	#0xfff0,d0		| preserve sound dma for now

	move.w	d0,dmacon(a6)		| clr bits



	eor.w	#0x3fff,d0
	or.w	#0xc000,d0		
	move.w	d0,dmacon(a6)		| set bits and main

	move.l	old_syscoplist,cop1lc(a6)
	move.l	_gfxbase,a6
	move.b	gb_ChipRevBits0(a6),chiprevbits+3
	move.l	old_actiview,a1
	jsr	_LVOLoadView(a6)


	moveq	#0,d0
	rts

quit_to_os:
	tst.l	_resload
	bne.b	0f
	bsr		restore_system
	* set SR to 0 from here, so we return to OS with SR=0
	* (else it kills the system pretty quickly)
	* it works as quit_to_os is called from an interrupt
	move.w	#0,SR
	move.l	old_stack(pc),a7
	jbsr		save_highscores
	moveq	#0,d0
	rts
0:
	pea	  TDREASON_OK
	move.l	_resload(pc),-(a7)
	addq.l	#resload_Abort,(a7)
	rts



	
platform_init:
	bsr		store_system
	
	lea		_custom,a5
	move.w	#0x7FFF,dmacon(a5)
	move.w	#0x7FFF,intena(a5)
    move.l  #-1,bltafwm(a5)
	
	move.l	monitor,d0
	cmp.l	#NTSC_MONITOR_ID,D0
	bne		0f
	* disable extra mid-screen interrupt, as it would be too fast (NTSC)
	move.w	#0x1FE,intreq_block_game
0:
     move.w #0x0610+BORDERBLANK,bplcon0(a5) | 8 bitplanes, dual playfield, borderblank
	move.w	#BASE_BPLCON2_VALUE,bplcon2(a5)
	move.w	#BASE_BPLCON3_VALUE,bplcon3(a5)
 	*         VVHH
    move.w #0x2499-0X18+0x40,diwstrt(a5)
    move.w #0x2479+0x48,diwstop(a5)
*	cmp.l	#NTSC_MONITOR_ID,monitor
*	jne		0f
*    move.w #0xFC81,diwstop(a5)
*0:	
    move.w #0x0038,ddfstrt(a5)
    move.w #0x00D0,ddfstop(a5)

	* restrict borders: we don't see bobs on the borders!
	* try to hide color 0 on the border (except on OCS)

    move.w #(SPRITE_FMODE<<2)+BITPLANE_FMODE,fmode(a5)	| 32 bit bitplane fetch, 64 bit wide sprites

	move.w	#0,bplcon1(a5)

	move.w	#-8+BG_NB_BYTES_PER_ROW-40,d0
    move.w d0,bpl2mod(a5)
	move.w	#-8+FG_NB_BYTES_PER_ROW-40,d0
    move.w d0,bpl1mod(a5)

	lea		game_copperlist,a0
	move.l	a0,cop1lc(a5)

	
	* set sprite registers to blank sprite in copperlist
	* we don't use sprites at all in that game
	* it's too complicated to use them because most
	* sprites have more than 3 colors. Blitter manages
	* very well.
	* we could have used attached sprites for main character
	
	lea	game_sprites+2,a2			| copperlist

	* pad last sprite entries with blank
	move.l	#blank_sprite,d0
1:
	move.w	d0,(4,a2)
	swap	d0
	move.w	d0,(a2)
	swap	d0
	addq	#8,a2
	cmp.l	#game_sprites_end,a2
	bcs		1b
2:	



	* wait 300 lines
	move.w	#100,d0
	bsr	beamdelay
	move.w	#100,d0
	bsr	beamdelay
	move.w	#100,d0
	bsr	beamdelay
	
    * init sprite, bitplane, whatever dma

    move.w #0x83E0,dmacon(a5)
 

	* install keyboard and vblank/copper handler
	move.l	system_vbr(pc),a1
	pea		level2_interrupt(pc)
	move.l	(a7)+,(0x68,a1)
	pea		_vblank(pc)
	move.l	(a7)+,(0x6C,a1)
	pea		_nmi(pc)
	move.l	(a7)+,(0x7C,a1)

	* soundfx lib
	lea		_custom,a6
	lea		blank_sound,a0
	move.l	a0,(0xA0,a6)
	move.l	a0,(0xB0,a6)
	move.l	a0,(0xC0,a6)
	move.l	a0,(0xD0,a6)
	move.l	system_vbr(pc),a0
	moveq	#1,d0	| PAL
	jsr		_mt_install_cia


	.ifne	OPT_ENABLE_PROFILING
	* init profiling if enabled
	lea		0x180000,a0
	move.l	#0x20000,d0
	lea		0x100,a1
	bsr		init_fixed_address
	bsr		install_profiler_vbl_hook
	.endif

	
    rts
	

* so memory is quadword-aligned (not trusting .align directives)
align_for_fmode:
	add.w	#0x8,a0
	move.l	a0,d0
	and.b	#0xF8,d0
	move.l	d0,a0
	rts


* < A0: palette
* < A1: copperlist
* < D0: number of colors to load	
load_palette:
	subq.w	#1,d0
	beq.b	2f
1:
	addq.w	#2,a1
	move.w	(a0)+,(a1)+
	dbf		d0,1b
2:
	rts
	


	
	

osd_enable_interrupts:
	move.w	#0xC038,_custom+intena
	rts
osd_disable_interrupts:
	move.w	#0x0030,_custom+intena
	rts

* a0=screen virtual address (preserved), d0=tile (preserved)
* a6=ram base
* should preserve all registers

osd_video_word_dirty:
	jbsr	osd_video_byte_dirty
	addq	#1,a0
	jbsr	osd_video_byte_dirty
	subq	#1,a0
	rts
	
osd_video_byte_dirty:
	movem.l	d0/d1/d7/a0/a1,-(a7)
	move.l	a0,d7		| save address
	sub.l	a6,d7


	.ifndef	RELEASE
	cmp.l	#0x4000,d7
	jcs		0f
	jbsr	osd_get_last_known_pc
	BREAKPOINT	"write videoram out of range (D7 >= $3800), PC in D6"
	jra		osd_video_dirty_out
0:
	.endif

	* remove 0x8000 offset (ram starts at 0x8000)
	sub.w	#0x3000,d7
	.ifndef	RELEASE
	jpl	1f

	* should not happen
	add.w	#0x3000,d7
	jbsr	osd_get_last_known_pc
	BREAKPOINT	"write videoram out of range (D7 < $3000), PC in D6"
	jra		osd_video_dirty_out
	.endif
1:	
	
	* now set the flag for tile refresh in copper interrupt (so it doesn't
	* interfere with blits. This game uses a lot of tile animation in the background
	* as opposed to most games, so updating in real tile isn't an option and kills
	* the smoothness even in double buffering mode)

	and.w	#0x7FF,d7

	lea		tiles_refresh_table(pc),a0
	add.w	d7,a0
	lsr.w	#6,d7	| get row for faster operation
	lea		tiles_row_flags(pc),a1
	add.w	d7,a1
	* now a0 points on the tiles refresh table, mark it dirty
*	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
*	moveq	#2,d7
*	.else
	moveq	#1,d7		| background tiles aren't double buffered here!
*	.endif
	move.b	d7,(a0)
	move.b	d7,(a1)

osd_video_dirty_out:
	movem.l	(a7)+,d0/d1/d7/a0/a1
	rts	


* < D7: 0-0x800
* > D0: 
compute_tile_xy:
	moveq	#0,d0
	move.b	d7,d0
	
	and.b	#0x3F,d0	| x
	move.w	d7,d1
	and.w	#0x7FF,d1
	lsr.w	#6,d1		| Y
	lsl.w	#3,d1		| times 8
	rts

	.ifdef	XXX
compute_tile_xy_portrait:
	moveq	#0,d0
	moveq	#0,d1
	move.w	d7,d1
	lsr.w	#5,d7		| this is X
	neg.w	d7
	add.w	#32,d7
	and.w	#0x1F,d1	| this is Y
	*addq.w	#2,d1

	move.b	d7,d0		| this is X
	lsl.b	#3,d1		| Y times 8
	rts
	.endif


* TILE_GET_INFO_MEMBER(trackfld_state::get_bg_tile_info)
* {
* 	int attr = m_colorram[tile_index];
* 	int code = m_videoram[tile_index] + 4 * (attr & 0xc0);
* 	int color = attr & 0x0f;
* 	int flags = ((attr & 0x10) ? TILE_FLIPX : 0) | ((attr & 0x20) ? TILE_FLIPY : 0);
* 
* 	if (m_bg_bank)
* 		code |= 0x400;
* 
* 	tileinfo.set(1, code, color, flags);
* }


* addresses 0x3000->0x307F don't map to visible tiles (2 first rows)
* addresses 0x3780->0x37FF don't map to visible tiles (2 last rows)
* each column has 0x20*8 = 256 pixels
* each visible row has 28*8 = 244 pixels

* < D7: 0-0x800 address
* < D0: tile code
* < D1: color code

update_bg_tile:
	moveq	#0,d2			| mask up to 255
	move.b	d0,d2			| tile code
	moveq	#0,d3
	move.b	d1,d3			| CLUT & tile code & flags
	bclr	#6,d3
	jeq		0f
	bset	#8,d2			| add 0x100
0:
	bclr	#7,d3
	jeq		0f
	bset	#9,d2			| add 0x200
0:
	.ifne	OPT_ENABLE_LOGGING
	lea		character_log_table,a0
	movem.w	d2-d3,-(a7)
	and.w	#0xF,d3
	lsl.w	#4,d2		| 16 cluts
	add.w	d2,d3		| clut offset

	st.b	(a0,d3.l)
	movem.w	(a7)+,d2-d3
	.endif

	bsr		compute_tile_xy
	
	lea		character_table,a0
	
	* updating bitplanes
	move.l	#BG_SCREEN_PLANE_SIZE,d5
	move.w	#NB_TILE_PLANES-1,d4
	move.l		background_ptr,a1


	lea		mulBG_NB_BYTES_PER_ROW_table,A2
	add.w	d1,d1
	move.w	(a2,d1.w),d1
	add.w	d1,d0
	add.w	d0,a1
	add.w	d0,a3


	
	add.w	d2,d2
	add.w	d2,d2	
	move.l	(a0,d2.w),d0		| tile pointer
	.ifdef	RELEASE
	jeq		11f					| clear tile, no error (release)
	.else
	jne		12f
	add.w	#0x3000,d7
	lsr.w	#2,d2
	move.w	#0xF0F,_custom+color
	jra		11f
12:
	.endif
	move.l	d0,a2
	move.b	d3,d1
	and.w	#0xF,d3
	add.w	d3,d3
	add.w	d3,d3
	move.l	(a2,d3.w),d0			| pointer on tile bitplanes for that CLUT
	.ifdef	RELEASE
	jeq		11f						| not necessarily a problem
	.else
	jne		12f
	add.w	#0x3000,d7
	lsr.w	#2,d2
	lsr.w	#2,d3
	move.w	#0xF0F,_custom+color
	jra		11f
	.endif
12:
	move.l	d0,a2					| pointer on bitplanes
	ror.b	#6,d1			        | modifiers on first bits
	and.w	#3,d1
	jeq		standard_tile
	

	add.w	d1,d1
	add.w	d1,d1
	lea		mirror_jump_table(pc),a4
	move.l	(a4,d1.w),a4
0:
	BTST	#6,(_custom+dmaconr)
	BNE.S	0b
	jmp		(a4)
	
	.macro	COPY_TILE_PLANE_ROW
	move.b	d0,(offset,a1)  | buffer
	.endm
	
	.macro	CLEAR_TILE_PLANE
	.set	offset,0
	.rept	8
	clr.b	(offset,a1)
	.set	offset,offset+BG_NB_BYTES_PER_ROW
	.endr	
	.endm
	
	.macro	COPY_TILE_PLANE_ROW_BACKBUFFER
	COPY_TILE_PLANE_ROW
	move.b	d0,(offset,a3)  | backbuffer
	.endm
	
	.macro	CLEAR_TILE_PLANE_BACKBUFFER
	.set	offset,0
	.rept	8
	clr.b	(offset,a1)
	clr.b	(offset,a3)
	.set	offset,offset+BG_NB_BYTES_PER_ROW
	.endr	
	.endm
	
	.macro	TILE_NEXT_PLANE
	add.w	d5,a1
	.endm
	
* made more complex by 4 tile orientations + the fact that the last
* tile bitplane should not be copied into the backbuffer as sprites
* only use 4 planes
standard_tile:

	* just copy

4:
	move.l	(a2)+,d0		| next plane
	jeq		5f
	move.l	d0,a0
	.set	offset,0
	.rept	8
	move.b	(a0)+,d0
	COPY_TILE_PLANE_ROW
	.set	offset,offset+BG_NB_BYTES_PER_ROW
	.endr
41:
	TILE_NEXT_PLANE
	dbf		d4,4b
	
0:
	rts
5:
	CLEAR_TILE_PLANE
	jra		41b

flipped_tile:	
4:
	move.l	(a2)+,d0		| next plane
	jeq		5f
	move.l	d0,a0
	.set	offset,8*BG_NB_BYTES_PER_ROW
	.rept	8
	.set	offset,offset-BG_NB_BYTES_PER_ROW
	move.b	(a0)+,d0
	COPY_TILE_PLANE_ROW
	.endr
41:
	TILE_NEXT_PLANE
	dbf		d4,4b
	
0:
	rts

	CLEAR_TILE_PLANE
	jra		41b
	
mirror_tile:
	lea		mirror_bits(pc),a4
	moveq	#0,d1
4:
	move.l	(a2)+,d0		| next plane
	jeq		5f
	move.l	d0,a0
	.set	offset,0
	.rept	8
	move.b	(a0)+,d1
	move.b	(a4,d1.w),d0	| mirror
	COPY_TILE_PLANE_ROW

	.set	offset,offset+BG_NB_BYTES_PER_ROW
	.endr
41:
	TILE_NEXT_PLANE
	dbf		d4,4b
	

0:
	rts
1:

5:
	CLEAR_TILE_PLANE
	jra		41b
	
mirror_flipped_tile:
	lea		mirror_bits(pc),a4
	moveq	#0,d1
4:
	move.l	(a2)+,d0		| next plane
	jeq		5f
	move.l	d0,a0
	.set	offset,8*BG_NB_BYTES_PER_ROW
	.rept	8
	.set	offset,offset-BG_NB_BYTES_PER_ROW
	move.b	(a0)+,d1
	move.b	(a4,d1.w),d0	| mirror
	COPY_TILE_PLANE_ROW

	.endr
41:

0:
	rts

5:
	CLEAR_TILE_PLANE
	jra		41b

	* clear tile

11:
111:
	CLEAR_TILE_PLANE
	TILE_NEXT_PLANE
	dbf		d4,111b
2:
	rts
	

mirror_jump_table:
	.long	standard_tile
	.long	flipped_tile
	.long	mirror_tile
	.long	mirror_flipped_tile
	
mirror_bits:
	.include "mirror_bits.68k"
	
* < d0.w: x
* < d1.w: y
* < a1: sprite pos table (depending on height)
* > d0.L: control word
store_sprite_pos:
	tst.w	d1
	jmi	0f
	cmp.w	#Y_MAX,d1
	jcc	0f

    move.l  a0,-(a7)

    lea	HW_SpriteXTable(pc),a0
	
	.ifdef	NO68020
    add.w	d0,d0
    add.w	d0,d0
    move.l	(a0,d0.w),d0
	move.w	d1,-(a7)
    add.w	d1,d1
    add.w	d1,d1
    or.l	(a1,d1.w),d0
	move.w	(a7)+,d1
	.else
    move.l	(a0,d0.w*4),d0
    or.l	(a1,d1.w*4),d0	
	.endc
    move.l  (a7)+,a0
    rts
0:
	moveq	#0,d0
	rts
	



HW_SpriteXTable:
	.set	reptn,0
	.rept 320
	.set	x,reptn+0x80
	.set reptn,reptn+1
    .byte  0,x>>1,0,x&1
  .endr

	.macro DEF_HW_SPRITE_Y_TABLE	height
HW_SpriteYTable_\height:
  .set	reptn,0
  .rept 288
	.set	ys,reptn+0x1c
	.set	ye,ys+\height
    .byte  ys&255, 0, ye&255, ((ys>>6)&4)+((ye>>7)&2)
	.set	reptn,reptn+1
  .endr
	.endm

	DEF_HW_SPRITE_Y_TABLE	16

* < A0: copperlist address for bitplane pointers
* < D0: first bitplane address
set_static_bitplanes:
    moveq #NB_TILE_PLANES-1,d1
 	move.l	#BG_SCREEN_PLANE_SIZE,d2
1:
    swap d0
    move.w d0,(a0)
    swap d0
    move.w d0,(4,a0)    
    addq.w  #8,a0
    add.l d2,d0
    dbf d1,1b
    rts

set_bob_bitplanes:
	movem.l	a0-a1/d0-d2,-(a7)
 	lea	bobs_bitplanes+2,a0
    moveq #NB_BOB_PLANES-1,d1
 	move.l	#FG_SCREEN_PLANE_SIZE,d2
    move.l	playfield_displayed_screen_ptr,d0
1:
    swap d0
    move.w d0,(a0)
    swap d0
    move.w d0,(4,a0)    
    addq.w  #8,a0
    add.l d2,d0
    dbf d1,1b
	movem.l	(a7)+,a0-a1/d0-d2
    rts

	
osd_debug_hook:
	rts
	
osd_get_random:
* > D0: pseudo random value (8 bits, all other bits zeroed)
	movem.l	a0,-(a7)
	lea	seed(pc),a0
	move.l	(a0),d0
	* thanks meynaf
	mulu #0xa57b,d0
	addi.l #0xbb40e62d,d0
	rol.l #6,d0	
	move.l	d0,(a0) 
	movem.l	(a7)+,a0
	add.b	_custom+vposr,d0
	and.l	#0xFF,d0
	rts
seed:
	dc.l	0x12345678

	
	
	
osd_read_inputs_2:
	moveq	#-1,d0

	rts
	
osd_read_system_inputs:
	st.b	d0

	movem.l	a0/d1,-(a7)
	lea		keyboard_table(pc),a0
	* misc control keys
	tst.b	(6,a0)		| "6" key like in MAME
	beq.b	0f
	bclr	#BIT_INSERT_COIN_2,d0
0:
	tst.b	(5,a0)		| "5" key like in MAME
	beq.b	0f
	bclr	#BIT_INSERT_COIN_1,d0
0:
	tst.b	(1,a0)		| "1" key like in MAME
	beq.b	0f
	bclr	#BIT_START_1P,d0
0:
	tst.b	(2,a0)		| "2" key like in MAME
	beq.b	0f
	bclr	#BIT_START_2P,d0
0:	

	bsr		is_game_playing
	jne	1f
	move.l	_joypad_state,d1
	* game not playing, we can insert coin/start with joypad
	btst	#JPB_BTN_RED,d1		| "5" key like in MAME
	beq.b	0f
	bclr	#BIT_INSERT_COIN_1,d0
0:
	btst	#JPB_BTN_UP,d1		| "1" key like in MAME
	beq.b	0f
	bclr	#BIT_START_1P,d0
0:
	btst	#JPB_BTN_DOWN,d1		| "2" key like in MAME
	beq.b	0f
	bclr	#BIT_START_2P,d0
0:	
1:	
	movem.l	(a7)+,a0/d1
	rts
	
osd_read_inputs_1:
	moveq	#-1,d0
	movem.l	a0/d1,-(a7)


	lea		keyboard_table(pc),a0

	tst.b	(0x4C,a0)		| "up" key
	beq.b	0f
	bclr	#BIT_UP,d0
0:
	tst.b	(0x4D,a0)		| "down" key
	beq.b	0f
	bclr	#BIT_DOWN,d0
0:
	tst.b	(0x4F,a0)		| "<-" key
	beq.b	0f
	bclr	#BIT_LEFT,d0
0:
	tst.b	(0x4E,a0)		| "->" key
	beq.b	0f
	bclr	#BIT_RIGHT,d0
0:
	tst.b	(0x63,a0)		| "ctrl" key
	beq.b	0f
	bclr	#BIT_FIRE,d0
0:
*	tst.b	(0x64,a0)		| left "alt" key
*	beq.b	0f
*	bclr	#BIT_JUMP,d0
*0:

	* directions + fire
	move.l	_joypad_state(pc),d1
	btst	#JPB_BTN_UP,d1
	beq.b	0f
	bclr	#BIT_UP,d0		| only if up for jump set!
0:
	btst	#JPB_BTN_DOWN,d1
	beq.b	0f
	bclr	#BIT_DOWN,d0
0:
	btst	#JPB_BTN_LEFT,d1
	beq.b	0f
	bclr	#0,d0
0:
	btst	#JPB_BTN_RIGHT,d1
	beq.b	0f
	bclr	#BIT_RIGHT,d0
0:
	btst	#JPB_BTN_RED,d1
	beq.b	0f
	bclr	#BIT_FIRE,d0
0:
*	btst	#JPB_BTN_BLU,d1
*	beq.b	0f
*	bclr	#BIT_JUMP,d0
*0:

	movem.l	(a7)+,a0/d1
	rts
	


	
osd_read_dsw_1:
	* actual dipswitches
	move.b	dip_switches_1(pc),d0
	not.b	d0		| active low
	rts
osd_read_dsw_2:
	* actual dipswitches
	move.b	dip_switches_2(pc),d0
	not.b	d0		| active low
	rts
osd_read_dsw_3:
	* actual dipswitches
	moveq	#-1,d0
*	move.b	dip_switches_0(pc),d0
*	not.b	d0		| active low
	rts

	


	

level2_interrupt:
	bsr		handle_keyboard
	move.w	#8,_custom+intreq
	rte
	
handle_keyboard:
	movem.l	D0/A0/A5,-(a7)
	LEA	0x00BFD000,A5
	MOVEQ	#0x08,D0
	AND.B	0x1D01(A5),D0
	jeq		1f
	MOVE.B	0x1C01(A5),D0
	NOT.B	D0
	ROR.B	#1,D0		| raw key code here
  
	CLR.B	0x1C01(A5)
  
    lea keyboard_table(pc),a0
    bclr    #7,d0
    seq (a0,d0.w)       | updates keyboard table
    jne   2f     | we don't care about key release
	
    cmp.b   #0x19,d0	| "P" key
    bne.b   0f

    bsr	toggle_pause
0:

	btst	#4,cheat_flags+3
	jeq		10f
	* cheat keys
	cmp.b	#0x50,d0	| F1 key: only 1 wolf
	bne.b	0f
	move.w	#0x0FF,_custom+color
	*st.b 	level_skip_flag
	st.b	cheat_used
	
0:
	cmp.b	#0x51,d0	|² F2 key
	bne.b	0f
	st.b	cheat_used
	move.w	#0x0FF,_custom+color
	
0:
	cmp.b	#0x52,d0	| F3 key
	bne.b	0f
	st.b	cheat_used
	* add 10000 points
	move.w	#0x0FF,_custom+color
	jbsr	add_10000_points
	
0:
	cmp.b	#0x53,d0	| F4 key
	bne.b	0f
	st.b	cheat_used
	move.w	#0x0FF,_custom+color
	eor.b	#1,invincible_flag
0:
*	cmp.b	#0x54,d0	| F5 key
*	bne.b	0f
*	st.b	cheat_used
*	move.w	#0x0FF,_custom+color
*0:
*
10:
	.ifndef	RELEASE

	.ifne	OPT_ENABLE_LOGGING
	cmp.b	#34,d0
	bne		0f
	* 'D': dump all logging buffers to data dir
	jbsr	osd_dump_logs
0:
	.endif
	cmp.b	#19,d0
	bne		0f
	* 'R': reset start level at 1
	move.w	#0x0FF,_custom+color
	clr.b	start_level
0:
	
*	cmp.b	#0x56,d0	| F7 key: lose all l
*	bne.b	0f
*	move.w	#0x0FF,_custom+color
*0:
	* last life, if killed, direct game over
	cmp.b	#0x57,d0	| F8 key: lose all lives
	bne.b	0f
	move.w	#0x0FF,_custom+color
	* last life, if killed, direct game over
	bsr		lose_all_lives
0:
	cmp.b	#0x58,d0	| F9 key crashes game (restarts whdload)
	bne.b	0f
	illegal
0:

	.endif

	cmp.b	_keyexit,d0	| "ESC" key or whdload quitkey
	bne.b	2f
	BSET	#0x06,0x1E01(A5)
	moveq	#2,d0
	bsr	beamdelay
	BCLR	#0x06,0x1E01(A5)	| acknowledge key
	bra		quit_to_os
2:
	BSET	#0x06,0x1E01(A5)
	moveq	#2,d0
	bsr	beamdelay
	BCLR	#0x06,0x1E01(A5)	| acknowledge key

1:
	movem.l	(a7)+,d0/a0/a5
	rts
	
toggle_pause:
	* pause only within game
	jbsr		is_game_playing
	beq.b	0f
	eor.b   #1,pause_flag
0:
	rts

	
    
* < D0: numbers of vertical positions to wait
beamdelay:
0:
	move.w  d0,-(a7)
    move.b	0xdff006,d0	| VPOS
1:
	cmp.b	0xdff006,d0
	beq.s	1b
	move.w	(a7)+,d0
	dbf	d0,0b
	rts

	
	MUL_TABLE	FG_NB_BYTES_PER_ROW,NB_LINES*2
	MUL_TABLE	BG_NB_BYTES_PER_ROW,NB_LINES*2






	.align	4		| leave this long word alignment
program_args:	ds.l	64,0
program_args_end:
	.long	0		| add a longword else it overwrites the read args string in kick 1.3!
	.align	4
read_args_string:
	.byte	read_args_string_end-read_args_string
	.ascii	"INVINCIBLE/S,INFLIVES/S,"
	.ascii	"CHEATKEYS/S,STARTLIVES/K/N,SKILL/K/N,STARTLEVEL/K/N"
read_args_string_end:
	.align	2


	.ifndef	RELEASE
sprite_allocation_error:
	.asciz	"sprite allocation error"
write_videoram_out_of_range_error:
	.asciz	"write videoram out of range (D7)"
write_colorram_out_of_range_error:
	.asciz	"write colorram out of range (D7)"

	.align	2
	.endif

old_intena:
	.long	0
old_dmacon:
	.long	0
old_sysvectors:
	ds.l	10
old_vbr:
	.long	0
old_syscoplist:
	.long	0
old_actiview:
	.long	0
old_stack:
	.long	0

	
_tag:
		.long	WHDLTAG_MONITOR_GET
monitor:
		.long	0
		.long	WHDLTAG_CHIPREVBITS_GET
chiprevbits:
		.long	0
		.long	WHDLTAG_CUSTOM1_GET
cheat_flags:
		.long	0

		.long	WHDLTAG_CUSTOM2_GET
misc_options:
		.long	0
		
		.long	WHDLTAG_CUSTOM3_GET
start_level_option:
		.long	0
		
		.long	WHDLTAG_CUSTOM4_GET
start_lives:
		.long	0

		.long	WHDLTAG_CUSTOM5_GET
difficulty_level:
		.long	0
	.long	0
dip_switches_1:
		.byte	0
dip_switches_2:
		.byte	0

	
mid_screen_interrupt_count:
	.byte	0
	.align	2
system_vbr:
	.long	0


flip_flop:
	.byte	0


	.align	2

host_sprites:
	ds.b	8*SPRITE_SIZEOF
keyboard_table:
	ds.b	0x100

interrupt_mode:
	.word	0
	
	
last_known_m6809_pc:
	.word	-1
pause_flag:
	.word	0
frameskip:
	.word	0

tiles_row_flags:
	.skip	0x20
tiles_refresh_table:
	.skip	0x800
	
vbl_counter:
	.word	0
_resload:
	.long	0
_joypad_state:
	.long	0
_previous_joypad_state:
	.long	0
_gfxbase:
	.long	0
_dosbase:
	.long	0
delay_timer:
	.word	0
one_out_of_five:
	.word	0


fg_screen_data_1:
	.long	0
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
fg_screen_data_2:
	.long	0
	.endif
	
	.set	offset,0
scroll_row_copper_address_table:
	.rept	NB_SCROLL_ROWS/2
	.long	scroll_rows_first_half+6+offset
	.set	offset,offset+40
	.endr
	.set	offset,0
	.rept	NB_SCROLL_ROWS/2
	.long	scroll_rows_second_half+6+offset
	.set	offset,offset+40
	.endr

background_ptr:
	.long	0
playfield_drawn_screen_ptr:
	.long	0
playfield_displayed_screen_ptr:
	.long	0

	.include	"sound_entries.68k"

	
update_tile_function:
	.long	0
_keyexit:
	.byte	0x45	| ESC by default unless whdload overwrites it

	
cheat_used:
	.byte	0
dosname:
	.ascii	"dos.library"
	.byte	0
graphicsname:
	.ascii	"graphics.library"
	.byte	0
floppy_file:
	.ascii	"floppy"
	.byte	0
temp_filename_buffer:
	ds.b	255
_end_of_ng_code:
		
  

	.align 2



palette:	
	.include "palette.68k"

	.ifndef	RELEASE
log_ptr:
	.long	log_buffer

log_buffer:
	.skip	LOG_BUFFER_SIZE
	.rept	20
	.long	0xCAFECAFE
	.endr

cpu_log_enable:
	.word	0
	.endif

scroll_table:
	.include	"scroll_table_64.68k"

	
	* on amiga, this file is included in mpatrol.68k file
	* so the assembler can optimize by using PC-relative addressing
	* whenever possible (and it does)
	.ifndef	RELEASE
	* easier to debug game to have memory aligned on 0x10000

	.ifne	OPT_ENABLE_LOGGING
	.section	.bss

sprite_log_table:
	* 16 cluts, 256 tiles
	* a lot of combinations aren't used (fortunately!)
	.skip	16*NB_POSSIBLE_SPRITES
character_log_table:
	* 16 cluts, 768 tiles
	* a lot of combinations aren't used (fortunately!)
	.skip	16*NB_POSSIBLE_TILES
	.skip	16*(1024-NB_POSSIBLE_TILES)  | just in case of a bug
	.endif
	.endif



	.section	.datachip

* title
.macro	DECL_BITPLANES	bpoff_start,nb_planes
	.set	bpoff,\bpoff_start
	.rept	\nb_planes
	dc.w  0xe0+bpoff,0
	dc.w  0xe2+bpoff,0
	.set	bpoff,bpoff+4
	.endr
	.endm

	
.macro	DECL_COLORS	offset,nb_colors
	.set	colidx,\offset
	.rept	\nb_colors
	dc.w	color+(colidx*2),0
	.set	colidx,colidx+1
	.endr
	.endm
	
* game	
	.macro	DECL_EVEN_BITPLANES	bpoff_start,nb_planes
	.set	bpoff,\bpoff_start
	.rept	\nb_planes
	dc.w  bplpt+bpoff,0
	dc.w  bplpt+bpoff+2,0
	.set	bpoff,bpoff+8
	.endr
	.endm

	.macro	DECL_SPRITES
	.set	sprite_start,sprpt+0
	.rept	16
	* 2 slots
	.word	sprite_start,0
	.set	sprite_start,sprite_start+2
    .endr
	.endm

	.macro  HALF_SCROLL_ROWS
	.rept	NB_SCROLL_ROWS/2
	.word	0x01+(y_start*256),0xFFFE
	.word	bplcon1
	.word	0
	DECL_EVEN_BITPLANES	4,4
	.set	y_start,y_start+8
	.endr
	.endm 
	
blank_sprite:
	.long	0,0
	
blank_sound:
	ds.l	4
	
debug_copperlist:
	dc.w	bplcon0,0x200
	dc.w	color
debug_color:
	dc.w	0
	dc.l	-2
	


	
	* main copperlist
game_copperlist:
	* all sprites have the same palette no need to specify odd or even
	* on color bank 1
	
	* black color background plane

	* enable sprite colors now

bobs_bitplanes:
	DECL_EVEN_BITPLANES	0,4
tiles_bitplanes:
	DECL_EVEN_BITPLANES	4,4
	* set 0-scroll value value for both plane sets
	.word	bplcon1
reset_bplcon1_1:
	.word 	0

*game_sprite_colors:
*	DECL_COLORS	16,16
game_sprites:
	DECL_SPRITES
game_sprites_end:

tiles_colors:
	DECL_COLORS	16,TOTAL_NB_COLORS
bobs_colors:
	DECL_COLORS	0,TOTAL_NB_COLORS

	.set	y_start,0x24
scroll_rows_first_half:
	HALF_SCROLL_ROWS
	* not sure if it's really half screen but it doesn't matter
intreq_block_game:
	.word	 intreq,0x8014  | call copper interrupt in the middle of a frame, also flag so copper interrupt knows that we're going to call copper int

scroll_rows_second_half:
	HALF_SCROLL_ROWS


	* purple 


	* pal limit
    .word  0xFFCF,0xFFFE       | PAL wait
	.word	bplcon1
	* set 0-scroll value value for both plane sets
reset_bplcon1_2:
	.word	0			| reset scrolling
	.word	0x1601,0xFFFE

	| no bobs from now on, get a LOT of drawing time
	.word	 intreq,0x8010

	* black color sprites
	*DECL_COLORS	16,16


	
     .long    -2					
	.ascii	"ENDCPLST"

	* aligning on 8 bytes so .align will work
	* in the next datachip sections
	.align	8
	
		.section .bsschip
		
	
background_buffer:
	.skip	BG_SCREEN_SIZE
		
fg_screen_buffer_1:
	.skip	FG_SCREEN_SIZE
	.skip	FG_NB_BYTES_PER_ROW*12*3
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
fg_screen_buffer_2:
	.skip	FG_SCREEN_SIZE
	.skip	FG_NB_BYTES_PER_ROW*12*3
	.endif


		