		.global osd_read_high_scores
		.global osd_write_high_scores
		.global	load_highscores
		.global	save_highscores
		.global update_elevator_sound
		.global osd_sound_start
		.global	osd_break
		.global osd_music_stop
		.global	process_speech_queue
		.global	music_playing
		.global	delay_timer
		
		* read/write on memory
		.ifndef	RELEASE
		.global	character_log_table
		.global	sprite_log_table
		.global	osd_log_cpu
		.global osd_get_last_known_pc
		.global	osd_dump_logs
		.global	osd_cpu_logging_control
		.endif

* sound engine and also highscore management, common to all versions
	
	.include "lvo/dos_lvos.i"
	.include "hardware/custom.i"
	.include "track_and_field.inc"
	.include "sounds.inc"

NB_SOUND_QUEUE_ENTRIES = 16

NV_RAM_ADDRESS = 0x2800
SCORE_FILE_SIZE = 0x800

	.ifdef	RELEASE
OPT_ENABLE_LOGGING = 0           | DO NOT CHANGE THIS
	.else
OPT_ENABLE_LOGGING = 1

* set to higher values than 1 to speed game up


	.endif
	
.macro	GET_MEMORY_START_IN_A6
	move.l	m6809_direct_page_pointer,a4
	.ifdef	RELEASE
	lea		ram_buffer-0x1800,a6
	.else
	move.l		ram_start_1800,a6
	
	* adjust offset to avoid subbing at run-time
	sub.w	#0x1800,a6
	.endif
	.endm
		


osd_get_last_known_pc:
	move.w	last_known_m6809_pc,d6
	rts


osd_read_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	move.l	_resload,d0
	beq.b	0f
	move.l	d0,a2
	GET_MEMORY_START_IN_A6
	bsr		get_hiscore_name
 	jsr		resload_GetFileSize(a2)		
	tst.l	d0
	beq.b	1f
	bsr		get_hiscore_name
	lea		(NV_RAM_ADDRESS,a6),a1
	jsr		resload_LoadFile(a2)	
	bra.b	1f
0:
	tst.b	highscore_loaded
	beq.b	1f
2:
	* from DOS: just copy buffer
	GET_MEMORY_START_IN_A6
	* first just copy buffer as contiguous 
	lea		(NV_RAM_ADDRESS,a6),a1
	lea		high_score_buffer,a0
	move.w	#SCORE_FILE_SIZE-1,d0

0:
	move.b	(a0)+,(a1)+
	dbf		d0,0b

1:
	* fix here: in the arcade it's not possible to beat
	* times for dash & hurdles, simply because the memory is
	* zeroed, which creates impossible times at 0 seconds...
	lea		(NV_RAM_ADDRESS+0x400,a6),a1
	jbsr	fix_times
	lea		(NV_RAM_ADDRESS+0x460,a6),a1
	jbsr	fix_times
	movem.l	(a7)+,d0-d7/a0-a6
	rts
fix_times:
	tst.b	(a1)
	jne		2f
	* zero for 110m hurdles: we should fix it
	move.b	#4,(a1)
	move.b	#5,(8,a1)
	move.b	#6,(16,a1)
2:
	rts
osd_write_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	.ifdef	RELEASE
	tst.b	cheat_used		| don't save score if cheat on
	bne.b	10f
	.endif
	GET_MEMORY_START_IN_A6
	lea		(NV_RAM_ADDRESS,a6),a1

	move.l	_resload,d0
	beq.b	0f
	move.l	d0,a2
	move.l	#SCORE_FILE_SIZE,d0
	bsr		get_hiscore_name
	jsr		resload_SaveFile(a2)
	jra 	10f
0:

	* first just copy buffer as contiguous 
	lea 	high_score_buffer,a0
	move.w	#SCORE_FILE_SIZE-1,d0
0:
	move.b	(a1)+,(a0)+
	dbf	d0,0b

	st.b	highscore_needs_saving
	

10:
	movem.l	(a7)+,d0-d7/a0-a6
	rts


	
get_hiscore_name:
    lea normal_hiscorename,a0
	rts
	
load_highscores:
	bsr.b		get_hiscore_name
    move.l  _resload,d0
    bne.b   1f

    move.l  _dosbase,a6
    move.l  a0,d1
    move.l  #1005,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVORead,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
	st.b	highscore_loaded
1:

    rts

save_highscores:
	tst.l	_resload
	bne.b	1f
    tst.b   highscore_needs_saving
    beq.b   1f
    move.l  _dosbase,a6
	bsr.b		get_hiscore_name
    move.l  a0,d1
    move.l  #1006,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVOWrite,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
1:	
    rts

* no need to save any registers, this is called at the end of the
* copper interrupt
process_speech_queue:
	move.w	speech_tick,d0
	jeq		0f
	* a speech sound is playing: decrease timer and exit
	subq	#1,d0
	move.w	d0,speech_tick
	rts
0:
	* no speech sound is playing. See if there's something to do
	*move.l	a1,-(a7)
	move.l	consumed_speech_pointer,a1
	cmp.l	queued_speech_pointer,a1
	jeq		1f

	* consumed/queued at different addresses: do something
	move.l	(a1)+,a0
	jbsr	wrap_speech_pointer
	move.l	a1,consumed_speech_pointer
	* initialize tick
	move.w	(12,a0),speech_tick
	* and play speech sample
	*move.l	a6,-(a7)
	lea		_custom,a6
	jbsr 	_mt_playfx
	*move.l	(a7)+,a6
1:
	*move.l	(a7)+,a1
	* nothing to process
	rts
* < A0: sounfx extended structure (with tick information)
queue_speech:
	move.l	a1,-(a7)
	move.l	queued_speech_pointer,a1
	move.l	a0,(a1)+
	jbsr	wrap_speech_pointer
	move.l	a1,queued_speech_pointer
	move.l	(a7)+,a1
	rts

wrap_speech_pointer:
	cmp.l 	#queued_speech_buffer_end,a1
	jne		0f
	* wrap
	lea		queued_speech_buffer_start,a1
0:
	rts
	
osd_music_stop:
	tst.b	looped_sound_enabled
	jeq		0f
	movem.l	d0/a0/a6,-(a7)
	lea		_custom,a6
	move.w	#2,d0			| loop channel
	jbsr	_mt_stopfx
	clr.b	looped_sound_enabled
	movem.l	(a7)+,d0/a0/a6
0:

	
	tst.b	music_playing
	jne		force_sound_stop
	rts

force_sound_stop:
	movem.l	d0-d1/a0/a6,-(a7)
	lea		_custom,a6
	move.b	#-1,music_track_start_number
    clr.w   speech_tick   | not playing anymore
	clr.b	music_playing
	clr.b	looped_sound_enabled
    jsr		_mt_end
0:
	movem.l	(a7)+,d0-d1/a0/a6
	rts
	
osd_sound_start:
	movem.l	d0/d1/a0/a6,-(a7)
	lea		_custom,a6
	and.w	#0xFF,d0
	jne		0f

	* null sound: stop
	clr.b	last_sound_played
	jbsr	osd_music_stop
	jra		10f
0:

	cmp.b	#RECORD_BROKEN_TUNE_SND,d0
	jne		0f
	* try to save memory when game triggers a "record broken"
	jbsr	osd_write_high_scores
0:
	cmp.b	#JUMP_MEASURE_SND,d0
	jne		0f
	* kludge: if long jump measure sound is played just after loop stop, don't play it
	tst.b	last_sound_played
	jeq		10f
0:
	cmp.b	#CHARIOTS_TUNE_SND,d0
	jne		0f
	* try to save memory when game triggers a "chariots of fire" tune
	jbsr	osd_write_high_scores
0:
	lsl.w	#3,d0
	lea		sound_table,a0

	move.w	(a0,d0.w),d1	| sound type
	beq.b	11f		| no sound
	cmp.w	#3,d1
	jeq		10f		| skipped (normal)
2:
	cmp.w	#1,d1
	bne.b	5f		| music module
	move.w	(2,a0,d0.w),d1
	move.l	(4,a0,d0.w),a0
	lea		_custom,a6
	tst.w	d1
	beq.b	3f
	* looped sound
	tst.b	looped_sound_enabled
	bne.b	3f
	* looped sound
	st.b	looped_sound_enabled
	jsr		_mt_loopfx
	bra.b	10f
3:
	* game is using speech, which acts differently from other sounds
	* any sound is played immediately, but speech sound is played after another
	* speech sound. The game announces times/distances by queuing all speech samples
	* without any delay, leaving the job of timing the plays to the sound CPU. We have
	* to emulate that behaviour
	lsr.w	#3,d0
	btst	#7,d0		| 7 bit set: speech
	jeq		4f
	* speech: just queue the sound sample, the vblank
	* irq will handle this, on a dedicated channel
	jbsr	queue_speech
	jra		10f
4:
	move.b	d0,last_sound_played
	jsr		_mt_playfx
10:
	movem.l	(a7)+,d0/d1/a0/a6
	rts
11:
	move.w	d0,d1
	lsr.w	#3,d1

	BREAKPOINT	"unknown sound (index in D1)"
	jra		10b
	
	* music
5:

	* here we allow music to override another looping music
	*tst.w	music_tick
	*bne.b	10b
	* play the proper module pattern
	* load up the countdown if loop
	
	move.w	(2,a0,d0.w),d1	| pattern number in .mod file
	* since it's not zero, next vbl tick will play the music
	
	cmp.b	music_track_start_number,d1
	beq.b	10b		| same track, skip

    movem.l d0-a6,-(a7)
	bsr		force_sound_stop
    lea _custom,a6
 	movem.l	d0/a0,-(a7)
	lea	track_and_field_tunes,a0

	
	move.b	d1,music_track_start_number
	move.w	d1,d0
    sub.l   a1,a1		| samples are in the module

    jsr _mt_init
	movem.l	(a7)+,d0/a0

    * set master volume a little less loud if needed
	move.b	(6,a0,d0.w),music_volume
	move.w	(2,a0,d0.w),music_pattern	| pattern number in .mod file


    moveq	#0,d0
	move.b	music_volume,d0
    jsr	_mt_mastervol
	st.b	music_playing
    jsr _mt_start
    movem.l (a7)+,d0-a6
	
6:
	jra	10b


osd_break:
	* sends a WinUAE command to enter WinUAE debugger
	.ifndef	RELEASE
	move.l	D0,-(a7)
	pea     0.w
	* Normally it would point to where the result of the command is written, but since the last parameter (first pushed)
	* indicating the number of bytes to write is 0, nothing is written.
	pea     0.w	
	pea     1003f-1002f
	pea     1002f(pc)
	pea     -1.w
	pea     82.w
	jsr     0xf0ff60
	lea     24(sp),sp
	move.l	(a7)+,d0
	.endif
    rts
		
1002: .asciz    "AKS_ENTERDEBUGGER 1"
1003:
        .align	2

	

* < D0: number of 1/60Hz ticks
* can work with interrupts enabled or disabled
osd_wait:
	move.w	d0,delay_timer
	**jbsr	osd_is_vblank_interrupt_enabled
	tst.w	d0
	jne		2f
	* interrupts are disabled: timer isn't going to change
	* wait using vertical blank interrupt request (we don't need it!)
	clr.w	one_out_of_five
0:
	move.w	#0x20,_custom+intreq
	move.w	#0x20,_custom+intreq
1:
	move.w	_custom+intreqr,d0
	btst	#5,d0
	beq.b	1b
	addq.w	#1,one_out_of_five
	cmp.w	#5,one_out_of_five
	bne.b	5f
	subq.w	#1,delay_timer	
	clr.w	one_out_of_five
5:
	subq.w	#1,delay_timer
	beq.b	4f
	bpl.b	0b
4:
	rts
	
2:
	tst.w	delay_timer
	bne.b	2b
	rts



	.ifndef	RELEASE

	.macro	CHECK_ZERO_MSW	reg
	swap	\reg
	tst		\reg
	jeq		0f
	move.w	(6,a7),d6
	BREAKPOINT		"\reg MSW is not zero, PC=check d6!"
0:
	swap	\reg
	.endm

osd_log_cpu:
	* first, check that registers don't have a wrong longword mask
	CHECK_ZERO_MSW	d1
	CHECK_ZERO_MSW	d2
	CHECK_ZERO_MSW	d3
	CHECK_ZERO_MSW	d4
	move.w	(6,a7),last_known_m6809_pc

	move.l	a6,-(a7)
	* check if cpu log is enabled
	tst.b	cpu_log_enable
	jeq		445f
	move.l	log_ptr,a6
	move.w	(10,a7),(a6)+	| the PC
	move.l	d1,-(a7)
	rol.w	#8,d1
	move.b	d0,d1
	rol.w	#8,d1   | make D, make sure that not too many diffs
	move.w	d0,(a6)+
	move.w	d1,(a6)+
	move.w	d2,(a6)+
	move.w	d3,(a6)+
	move.w	d4,(a6)+
	move.w	#0xDEAD,(a6)+
	move.l	a6,log_ptr
	cmp.w	#0xCAFE,(a6)  | hitting the protection buffer
	jne		444f
	BREAKPOINT	"cpu log buffer full, dumping and exiting!"
	jbsr	osd_dump_logs
	illegal
444:
	move.l	(a7)+,d1
445:
	move.l	(a7)+,a6
	rts
	
	
* < D6: 0 disable, 1 enable
osd_cpu_logging_control:
	move.b	d6,cpu_log_enable
	rts
	.endif
	
	.ifne	OPT_ENABLE_LOGGING



osd_dump_logs:
	move.w	sr,-(a7)
	move.w	#0x2700,SR
	movem.l	d0-a6,-(a7)
	move.l	_resload,a2
	lea		sprite_log_table,a1
	lea		sprite_log_name(pc),a0
	move.l	#16*NB_POSSIBLE_SPRITES,d0
	jbsr	resload_SaveFile(a2)
	
	move.l	_resload,a2
	lea		character_log_table,a1
	lea		character_log_name(pc),a0
	move.l	#16*NB_POSSIBLE_TILES,d0
	jbsr	resload_SaveFile(a2)
		
	GET_MEMORY_START_AND_DP
	lea		sprites_ram_name_1800(pc),a0
	lea	(RAM_START,a6),a1		| sprites
	move.l	#0x440,d0
	jbsr	resload_SaveFile(a2)

	
	jbsr	save_cpu_log
	
    movem.l (a7)+,d0-a6
	move.w	(a7)+,SR
	rts

save_cpu_log:
	move.l	_resload,a2
	lea		log_buffer,a1
	move.l	log_ptr,d0
	sub.l	a1,d0
	jeq		0f
	move.l	log_ptr,a0
	* add RAM & ROM base in the end
	move.l	a6,(a0)+
	move.l	#rom_base,(a0)+
	addq	#8,d0
	lea		cpu_log_name(pc),a0
	jbsr	resload_SaveFile(a2)
0:	
	rts
	

sprites_ram_name_1800:
	.asciz	"sprite_ram_1800"


sprite_log_name:
	.asciz	"used_sprites"
character_log_name:
	.asciz	"used_tiles"
cpu_log_name:
	.asciz	"cpu_log"
	.align	2
	.endif	


	.ifndef	RELEASE
log_ptr:
	.long	log_buffer

log_buffer:
	.skip	LOG_BUFFER_SIZE
	.rept	20
	.long	0xCAFECAFE
	.endr

cpu_log_enable:
	.word	0
	.endif

consumed_speech_pointer:
	.long 	queued_speech_buffer_start
queued_speech_pointer:
	.long 	queued_speech_buffer_start
queued_speech_buffer_start:
	.skip	NB_SOUND_QUEUE_ENTRIES*4
queued_speech_buffer_end:
	
music_playing:
	.byte	0
looped_sound_enabled:
	.byte	0
last_sound_played:
	.byte	0
music_loops:
	.byte	0
music_volume:
	.byte	0
	.align	2
music_track_start_number:
	.word	-1
music_pattern:
	.word	0
delay_timer:
	.word	0
one_out_of_five:
	.word	0
speech_tick:
	.word	

last_known_m6809_pc:
	.word	-1
music_duration:
	.word	0
high_score_buffer:
	.skip	SCORE_FILE_SIZE
highscore_needs_saving:
	.byte	0
highscore_loaded:
	.byte	0

normal_hiscorename:
	.asciz	"track_and_field.high"
	.align	2
	
	.ifndef	RELEASE
	* easier to debug game to have memory aligned on 0x10000

	.ifne	OPT_ENABLE_LOGGING
	.section	.bss

sprite_log_table:
	* 16 cluts, 256 tiles
	* a lot of combinations aren't used (fortunately!)
	.skip	16*NB_POSSIBLE_SPRITES
character_log_table:
	* 16 cluts, 768 tiles
	* a lot of combinations aren't used (fortunately!)
	.skip	16*NB_POSSIBLE_TILES
	.skip	16*(1024-NB_POSSIBLE_TILES)  | just in case of a bug
	.endif
	.endif